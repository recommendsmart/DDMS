<?php

/**
 * @file
 * laces theme.
 */

use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\views\Form\ViewsForm;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_alter().
 * From classy and seven theme.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function laces_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form':
      // Add placeholder text to keys input.
      $form['keys']['#attributes']['placeholder'] = t('Search site…');

      // Add classes to the search form submit input.
      $form['actions']['submit']['#attributes']['class'][] = 'search-form';
      $form['actions']['submit']['#attributes']['class'][] = 'submit';

      break;

    case 'search_form':
      $form['basic']['keys']['#attributes']['placeholder'] = t('Search site…');
      $form['basic']['submit']['#attributes']['class'][] = 'search-form';
      $form['basic']['submit']['#attributes']['class'][] = 'basic';
      $form['basic']['submit']['#attributes']['class'][] = 'submit';
      $form['advanced']['submit']['#attributes']['class'][] = 'search-form';
      $form['advanced']['submit']['#attributes']['class'][] = 'advanced';
      $form['advanced']['submit']['#attributes']['class'][] = 'submit';
      break;
  }

  /**
   * For media library
   */
  /* From classy */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    $form['#attributes']['class'][] = 'media-library-views-form';
  }
  /* From seven */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    if (isset($form['header'])) {
      $form['header']['#attributes']['class'][] =
        'media-library-views-form__header';
      $form['header']['media_bulk_form']['#attributes']['class'][] =
        'media-library-views-form__bulk_form';
    }
    $form['actions']['submit']['#attributes']['class'] =
      ['media-library-select'];
  }
  // Add after build to add a CSS class to the form actions.
  if ($form_id === 'views_exposed_form' && strpos($form['#id'], 'views-exposed-form-media-library-widget') === 0) {
    $form['actions']['#attributes']['class'][] =
      'media-library-view--form-actions';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * From seven theme.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function laces_form_media_library_add_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form';
  $form['#attached']['library'][] = 'laces/laces-media-library';

  // If there are unsaved media items, apply styling classes to various parts
  // of the form.
  if (isset($form['media'])) {
    $form['#attributes']['class'][] = 'media-library-add-form--with-input';

    // Put a wrapper around the informational message above the unsaved media
    // items.
    $form['description']['#template'] =
      '<p class="media-library-add-form__description">{{ text }}</p>';
  }
  else {
    $form['#attributes']['class'][] = 'media-library-add-form--without-input';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * From seven theme.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function laces_form_media_library_add_form_upload_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form--upload';

  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] =
      'media-library-add-form__input-wrapper';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * From seven theme.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function laces_form_media_library_add_form_oembed_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form--oembed';

  // If no media items have been added yet, add a couple of styling classes
  // to the initial URL form.
  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] =
      'media-library-add-form__input-wrapper';
    $form['container']['url']['#attributes']['class'][] =
      'media-library-add-form-oembed-url';
    $form['container']['submit']['#attributes']['class'][] =
      'media-library-add-form-oembed-submit';
  }
}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function laces_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#theme'] = ['node_edit_form'];
  $form['#attached']['library'][] = 'laces/laces-node-form';

  $form['advanced']['#type'] = 'container';
  $form['meta']['#type'] = 'container';
  $form['meta']['#access'] = TRUE;
  $form['meta']['changed']['#wrapper_attributes']['class'][] =
    'container-inline';
  $form['meta']['author']['#wrapper_attributes']['class'][] =
    'container-inline';

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';

}

/**
 * Implements hook_theme_HOOK_form_search_block_form_alter() for node add/edit.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function laces_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Search site…');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['content']['#entity_type'])) {
    $suggestions[] =
      'block__' . $variables['elements']['#base_plugin_id'] . '__' . $variables['elements']["content"]['#entity_type'];
    if (!empty($variables['elements']['content']['#field_name'])) {
      $suggestions[] =
        'block__' . $variables['elements']['#base_plugin_id'] . '__' . $variables['elements']["content"]['#entity_type'] . '_' . $variables['elements']['content']['#field_name'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#attributes']['data-drupal-selector'])) {
    $suggestions[] =
      'container__' . str_replace('-', '_', $variables['element']['#attributes']['data-drupal-selector']);
  }
  if (!empty($variables['element']['#id'])) {
    $suggestions[] =
      'container__' . str_replace('-', '_', $variables['element']['#id']);
  }
  if (!empty($variables['element']['keys']['#theme'])) {
    $suggestions[] =
      'container__' . str_replace('-', '_', $variables['element']['keys']['#theme']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestions[] =
    'field__node__' . $variables['element']['#field_name'] . '__' . $variables['element']['#bundle'] . '__' . $variables['element']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Add template suggestion based on form ID.
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'];
  }
  if (!empty($variables['element']['#type'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'];
  }
  if (!empty($variables['element']['#id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace([
        '/',
        '-',
      ], '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '_' . str_replace([
        '/',
        '-',
      ], '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for image.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $view_id = Drupal::routeMatch()->getParameter('view_id');
  $display_id = Drupal::routeMatch()->getParameter('display_id');
  if (!empty($view_id)) {
    $suggestions[] = 'image__view__' . $view_id;
  }
  if (!empty($view_id) && !empty($display_id)) {
    $suggestions[] = 'image__view__' . $view_id . '__' . $display_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for image_formatter templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_image_formatter_alter(array &$suggestions, array $variables) {
  $view_id = Drupal::routeMatch()->getParameter('view_id');
  $display_id = Drupal::routeMatch()->getParameter('display_id');
  if (!empty($view_id)) {
    $suggestions[] = 'image_formatter__view__' . $view_id;
  }
  if (!empty($view_id) && !empty($display_id)) {
    $suggestions[] = 'image_formatter__view__' . $view_id . '__' . $display_id;
  }
  $entity = $variables['item']->getEntity();
  $field_name = $variables['item']->getParent()->getName();
  $suggestions[] =
    'image_formatter__' . $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $field_name;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for input__textfield
 * templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!empty($variables['theme_hook_original'])) {
    $suggestions[] = $variables['theme_hook_original'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function laces_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // Get the node type.
  if (!empty($variables['element']['#id'])) {
    $suggestions[] = 'container__links__' . str_replace([
        '-',
        '/',
      ], '_', $variables['element']['#id']);
  }
  if (!empty($variables['links']['node-readmore'])) {
    $suggestions[] = 'links__node_links';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 *
 * @param array $suggestions
 * @param array $variables
 *
 */
function laces_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Drupal\node\Entity\Node) {
    // Get the content type. $path_args[2] should be 'add' or 'edit'.
    $type = $node->getType();
    $suggestions[] = 'page__node__' . $type;
    $path_args = explode('/', Url::fromRoute('<current>')->getInternalPath());
    if (isset($path_args[2])) {
      if ($path_args[2] == 'add' || $path_args[2] == 'edit') {
        $suggestions[] = 'page__node__modify';
        $suggestions[] = 'page__node__modify__' . $type;
      }
      $suggestions[] = 'page__node__' . $path_args[2] . '__' . $type;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 *
 * @param array $suggestions
 * @param array $variables
 *
 */
function laces_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace([
        '/',
        '-',
      ], '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for
 * views-exposed-form--media-library--widget templates.
 *
 * @param array $suggestions
 * @param array $variables
 *
 */
function laces_theme_suggestions_views_exposed_form__media_library__widget_alter(array &$suggestions, array $variables) {
  if (!empty($variables['theme_hook_original'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__laces';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 *
 * @param array $suggestions
 * @param array $variables
 *
 */
function laces_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view_id = Drupal::routeMatch()->getParameter('view_id');
  $display_id = Drupal::routeMatch()->getParameter('display_id');
  if (!empty($view_id)) {
    $suggestions[] = 'views_view__' . $view_id . '__laces';
  }
  if (!empty($view_id) && !empty($display_id)) {
    $suggestions[] = 'views_view__' . $view_id . '__' . $display_id . '__laces';
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * @param array $variables
 */
function laces_preprocess_block(array &$variables) {
  $variables['title_attributes']['class'][] = 'block__title';
  // Add a class indicating the custom block bundle.
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['attributes']['class'][] =
      Html::getClass('block-type-' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_HOOK() for block content add list templates.
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 *
 * @param array $variables
 */
function laces_preprocess_block_content_add_list(array &$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = ['query' => Drupal::request()->query->all()];
      $variables['types'][$type->id()]['url'] =
        Url::fromRoute('block_content.add_form', ['block_content_type' => $type->id()], $options)
          ->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for list of available field templates.
 *
 * @param $variables
 */
function laces_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == "field_laces_image" &&
   $variables['element']['#view_mode'] = 'teaser') {
    $variables['element']['0']['#field_view_mode'] = "card-img-top";
  }
}


/**
 * @todo Remove this when https://www.drupal.org/project/drupal/issues/2999549
 * lands.
 * From seven theme.
 * @see \Drupal\media_library\Plugin\Field\FieldWidget\MediaLibraryWidget::formElement()
 *
 * @param array $variables
 */
function laces_preprocess_fieldset__media_library_widget(array &$variables) {
  if (isset($variables['prefix']['weight_toggle'])) {
    $variables['prefix']['weight_toggle']['#attributes']['class'][] =
      'media-library-widget__toggle-weight';
  }
  if (isset($variables['suffix']['open_button'])) {
    $variables['suffix']['open_button']['#attributes']['class'][] =
      'media-library-open-button';
  }
}
/**
 * Implements hook_preprocess_HOOK() for form.
 *
 * @param array $variables
 */
function laces_preprocess_form(array &$variables) {
  $variables['form_group'] = $variables['element']['#form_id'];
}

/**
 * Implements hook_preprocess_HOOK() for form_element.
 *
 * @param array $variables
 */
function laces_preprocess_form_element(array &$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] =
      new Attribute($variables['element']['#attributes']);
  }
}


/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * @param array $variables
 */
function laces_preprocess_html(array &$variables) {
  //Modify viewport to bootstrap 5 standards.
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1',
    ],
  ];
  $variables['#attached']['html_head'][] = [$viewport, 'viewport'];

  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_preprocess_item_list__media_library_add_form_media_list().
 * From seven theme.
 * This targets each new, unsaved media item added to the media library, before
 * they are saved.
 *
 * @param array $variables
 */
function laces_preprocess_item_list__media_library_add_form_media_list(array &$variables) {
  foreach ($variables['items'] as &$item) {
    $item['value']['preview']['#attributes']['class'][] =
      'media-library-add-form__preview';
    $item['value']['fields']['#attributes']['class'][] =
      'media-library-add-form__fields';
    $item['value']['remove_button']['#attributes']['class'][] =
      'media-library-add-form__remove-button';

    // #source_field_name is set by AddFormBase::buildEntityFormElement()
    // to help themes and form_alter hooks identify the source field.
    $fields = &$item['value']['fields'];
    $source_field_name = $fields['#source_field_name'];
    if (isset($fields[$source_field_name])) {
      $fields[$source_field_name]['#attributes']['class'][] =
        'media-library-add-form__source-field';
    }
  }
}
/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * @param array $variables
 */


function laces_preprocess_links(array &$variables) {
  /* Add Bootstrap 5 classes to Read More and Comments links */
  if (isset($variables['links']['node-readmore'])) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
  if (isset($variables['links']['comment-comments'])) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['comment-comments']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['comment-comments']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['comment-comments']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
  if (isset($variables['links']['comment-add'])) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['comment-add']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['comment-add']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['comment-add']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
  if (isset($variables['links']['comment-delete'])) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['comment-delete']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['comment-delete']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['comment-delete']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
  if (isset($variables['links']['comment-edit'])) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['comment-edit']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['comment-edit']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['comment-edit']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
  if ((isset($variables['links']['comment-reply']))) {
    $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
    $variables['links']['comment-reply']['link']['#options']['attributes']['class'][] =
      'btn';
    $variables['links']['comment-reply']['link']['#options']['attributes']['class'][] =
      'btn-sm';
    $variables['links']['comment-reply']['link']['#options']['attributes']['class'][] =
      'btn-outline-secondary';
  }
}

/** Implements hook_preprocess_links__dropbutton__operations()
 *
 * @param array $variables
 */
function laces_preprocess_links__dropbutton__operations(array &$variables) {
  foreach ($variables['links'] as &$link) {
    $link['link']['#options']['attributes']['class'][] = 'dropdown-item';
  }
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 * From classy theme.
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @param array $variables
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 */
function laces_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    $link['link']['#options']['attributes']['class'][] =
      'media-library-menu__link';
  }
}


/**
 * Implements hook_preprocess_HOOK() for menu-local-action.
 *
 * @param array $variables
 */
function laces_preprocess_menu_local_action(array &$variables) {
  $variables['#attached']['library'][] = 'laces/bootstrap-buttons';
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}

/**
 * Implement hook_preprocess_HOOK() for menu-local-task.
 *
 * @param array $variables
 */
function laces_preprocess_menu_local_task(array &$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_media().
 * From seven theme.
 * This targets each media item selected in an entity reference field.
 *
 * @param array $variables
 */
function laces_preprocess_media(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_media_library_item__widget().
 * From seven theme.
 * This targets each media item selected in an entity reference field.
 *
 * @param array $variables
 */
function laces_preprocess_media_library_item__widget(array &$variables) {
  $variables['content']['remove_button']['#attributes']['class'][] =
    'media-library-item__remove';
}

/**
 * Implements hook_preprocess_media_library_item__small().
 * From seven theme.
 * This targets each pre-selected media item selected when adding new media in
 * the modal media library dialog.
 *
 * @param array $variables
 */
function laces_preprocess_media_library_item__small(array &$variables) {
  $variables['content']['select']['#attributes']['class'][] =
    'media-library-item__click-to-select-checkbox';
}

/**
 * Implements hook_preprocess_HOOK() for list of available node type templates.
 *
 * @param $variables
 */
function laces_preprocess_node(&$variables) {
  $x = $variables;
}

/**
 * Implements hook_preprocess_HOOK() for list of available node type templates.
 *
 * @param $variables
 */
function laces_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] =
        Url::fromRoute('node.add', ['node_type' => $type->id()])
          ->toString();
    }
  }
}

/**
 * Implements hook_preprocess_image().
 *
 * @param array $variables
 */
function laces_preprocess_responsive_image(array &$variables) {
  if (!empty($variables['img_element']['#attributes'])) {
    // If class is a string it is coming from drupal_image (twig_tweak) function.
    if (isset($variables['img_element']['#attributes']['class']) && is_string($variables['img_element']['#attributes']['class'])) {
      return;
    }
    $variables['img_element']['#attributes']['class'][] = 'responsive_image';
    $variables['img_element']['#attributes']['class'][] = 'style__' . $variables['responsive_image_style_id'];
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 * From seven theme.
 * This targets each rendered media item in the grid display of the media
 * library's modal dialog.
 *
 * @param array $variables
 */
function laces_preprocess_views_view_fields__media_library(array &$variables) {
  // Add classes to media rendered entity field so it can be targeted for styling.
  // Adding this class in a template is very difficult to do.
  if (isset($variables['fields']['rendered_entity']->wrapper_attributes)) {
    $variables['fields']['rendered_entity']->wrapper_attributes->addClass('media-library-item__click-to-select-trigger');
  }
}

/**
 * Implements hook_views_pre_render().
 * From seven theme.
 *
 * @param \Drupal\views\ViewExecutable $view
 */
function laces_views_pre_render(ViewExecutable $view) {
  $add_classes = function (&$option, array $classes_to_add) {
    $classes = preg_split('/\s+/', $option);
    $classes = array_filter($classes);
    $classes = array_merge($classes, $classes_to_add);
    $option = implode(' ', array_unique($classes));
  };

  if ($view->id() === 'media_library') {
    if ($view->display_handler->options['defaults']['css_class']) {
      $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view']);
    }
    else {
      $add_classes($view->display_handler->options['css_class'], ['media-library-view']);
    }

    if ($view->current_display === 'page') {
      if (array_key_exists('media_bulk_form', $view->field)) {
        $add_classes($view->field['media_bulk_form']->options['element_class'], ['media-library-item__click-to-select-checkbox']);
      }
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('edit_media', $view->field)) {
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['media-library-item__edit']);
      }
      if (array_key_exists('delete_media', $view->field)) {
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['media-library-item__remove']);
      }
    }
    elseif (strpos($view->current_display, 'widget') === 0) {
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('media_library_select_form', $view->field)) {
        $add_classes($view->field['media_library_select_form']->options['element_wrapper_class'], ['media-library-item__click-to-select-checkbox']);
      }

      if ($view->display_handler->options['defaults']['css_class']) {
        $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view--widget']);
      }
      else {
        $add_classes($view->display_handler->options['css_class'], ['media-library-view--widget']);
      }
    }
  }
}

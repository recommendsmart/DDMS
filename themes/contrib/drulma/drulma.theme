<?php

/**
 * @file
 * The primary PHP file for the Drulma base theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;

/**
 * Implements template_preprocess_page_title().
 */
function drulma_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'][] = 'title';
}

/**
 * Implements template_preprocess_field().
 */
function drulma_preprocess_field(&$variables) {
  // Apply classes to  the label based on the display option.
  $variables['title_attributes']['class'][] = 'field--label-' . $variables['label_display'];

  if (
    $variables['field_name'] === 'title' &&
    ($variables['element']['#view_mode'] ?? '') === 'teaser'
  ) {
    $variables['attributes']['class'][] = 'title';
    $title_teaser_size = theme_get_setting('general.title_teaser_size');
    if ($title_teaser_size) {
      $variables['attributes']['class'][] = 'is-' . $title_teaser_size;
    }
  }
}

/**
 * Implements template_preprocess_page().
 */
function drulma_preprocess_page(&$variables) {
  $variables['wrap_content_in_container'] = theme_get_setting('general.wrap_content_in_container') ?? TRUE;
  $variables['header_attributtes'] = new Attribute([
    'class' => ['hero'],
    'role' => 'banner',
  ]);
  $hero_color = theme_get_setting('hero.color') ?? 'primary';
  if ($hero_color) {
    $variables['header_attributtes']->addClass('is-' . $hero_color);
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Add a prerender for the details element.
 */
function drulma_element_info_alter(array &$info) {
  $info['details']['#pre_render'][] = 'drulma_prerender_details';
  $info['radios']['#pre_render'][] = 'drulma_prerender_radios';
  $info['actions']['#pre_render'][] = 'drulma_prerender_actions';
}

/**
 * Wrap all children with a panel block div.
 */
function drulma_prerender_details($element) {
  foreach (Element::getVisibleChildren($element) as $child) {
    // Avoid nested panel blocks. This is the case for vertical_tabs.
    if (($element[$child]['#type'] ?? '') != 'details') {
      $element[$child]['#theme_wrappers'][] = 'container__panel_block';
    }
  }
  return $element;
}

/**
 * Correct theme wrappers set by drulma_prerender_details().
 *
 * The outer wrapper should always be the panel block container.
 */
function drulma_prerender_radios($element) {
  $containerWrapperIndex = array_search('container__panel_block', $element['#theme_wrappers']);
  if ($containerWrapperIndex !== FALSE) {
    unset($element['#theme_wrappers'][$containerWrapperIndex]);
    $element['#theme_wrappers'][] = 'container__panel_block';
  }
  return $element;
}

/**
 * Add proper actions to sets of actions and its buttons.
 */
function drulma_prerender_actions($element) {
  foreach (Element::getVisibleChildren($element) as $child) {
    $classes = $element[$child]['#attributes']['class'] ?? [];
    if (in_array('button--danger', $classes, TRUE)) {
      $element[$child]['#attributes']['class'][] = 'is-danger';
    }
    if (!empty($element[$child]['#button_type'])) {
      $element[$child]['#attributes']['class'][] = 'is-' . $element[$child]['#button_type'];
    }

  }
  $element['#attributes']['class'][] = 'control';
  $element['#attributes']['class'][] = 'buttons';
  return $element;
}

/**
 * Implements template_preprocess_block__system_menu_block().
 */
function drulma_preprocess_block__system_menu_block(&$variables) {
  $variables['attributes']['class'][] = 'menu';
  $variables['title_attributes']['class'][] = 'menu-label';
  $variables['content']['#theme'] .= '__block';
  $variables['content']['#attributes']['class'][] = 'menu-list';
}

/**
 * Implements template_preprocess_links__dropbutton__operations().
 */
function drulma_preprocess_links__dropbutton__operations(&$variables) {
  foreach ($variables['links'] as $linkName => &$link) {
    $link['link']['#options']['attributes']['class'][] = 'button';
    if ($linkName === 'delete') {
      $link['link']['#options']['attributes']['class'][] = 'is-danger';
    }
    else {
      $link['link']['#options']['attributes']['class'][] = 'is-link';
    }
  }
}

/**
 * Implements template_preprocess_input().
 */
function drulma_preprocess_input(&$variables) {
  $colorClasses = [
    'is-primary',
    'is-link',
    'is-info',
    'is-success',
    'is-warning',
    'is-danger',
  ];
  $classes = $variables['attributes']['class'] ?? [];
  if ($classes) {
    // Mark errored field with the danger style.
    if (in_array('error', $classes, TRUE)) {
      $variables['attributes']['class'][] = 'is-danger';
    }
    elseif (count(array_intersect($classes, $colorClasses)) == 0) {
      $variables['attributes']['class'][] = 'is-link';
    }
  }

  $input_size = theme_get_setting('forms.input_size') ?? '';
  if ($input_size) {
    $variables['attributes']['class'][] = 'is-' . $input_size;
  }

  $input_rounded = theme_get_setting('forms.input_rounded');
  if ($input_size) {
    $variables['attributes']['class'][] = 'is-rounded';
  }
}

/**
 * Implements template_preprocess_table().
 */
function drulma_preprocess_table(&$variables) {
  $variables['attributes']['class'][] = 'table';
  if (theme_get_setting('table.bordered')) {
    $variables['attributes']['class'][] = 'is-bordered';
  }

  if (theme_get_setting('table.striped')) {
    $variables['attributes']['class'][] = 'is-striped';
  }

  if (theme_get_setting('table.narrow')) {
    $variables['attributes']['class'][] = 'is-narrow';
  }

  if (theme_get_setting('table.hoverable')) {
    $variables['attributes']['class'][] = 'is-hoverable';
  }

  if (theme_get_setting('table.fullwidth')) {
    $variables['attributes']['class'][] = 'is-fullwidth';
  }
}

/**
 * Implements template_preprocess_views_view_table().
 */
function drulma_preprocess_views_view_table(&$variables) {
  drulma_preprocess_table($variables);
}

/**
 * Implements template_preprocess_views_view_table().
 */
function drulma_preprocess_field_ui_table(&$variables) {
  drulma_preprocess_table($variables);
}

/**
 * Implements template_preprocess_form_element_label().
 */
function drulma_preprocess_form_element_label(&$variables) {
  $label_size = theme_get_setting('forms.label_size') ?? '';
  if ($label_size) {
    $variables['attributes']['class'][] = 'is-' . $label_size;
  }
}

/**
 * Implements hook_theme_suggestions_file_link_alter().
 */
function drulma_theme_suggestions_file_link_alter(array &$suggestions, array $variables) {
  $cleanMimeType = strtolower(preg_replace('~[\W]~', '', file_icon_class($variables['file']->getMimeType())));
  $suggestions[] = 'file_link__' . $cleanMimeType;
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function drulma_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (
    $variables['theme_hook_original'] === 'input__submit' &&
    $variables['element']['#value'] instanceof TranslatableMarkup
  ) {
    $untranslatedCleanString = strtolower(preg_replace('~[\W]~', '', $variables['element']['#value']->getUntranslatedString()));
    array_splice($suggestions, 1, 0, $variables['theme_hook_original'] . '__' . $untranslatedCleanString);
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 *
 * Copied from the themable forms module 8.x-1.0-beta1 release.
 * Transformed into an alter hook.
 *
 * @see https://www.drupal.org/project/themable_forms
 */
function drulma_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__type__' . $variables['element']['#type'];
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__form_id__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'] . '__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_theme_suggestions_form_element_label_alter().
 *
 * Copied from the themable forms module 8.x-1.0-beta1 release.
 * Transformed into an alter hook.
 *
 * @see https://www.drupal.org/project/themable_forms
 */
function drulma_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  $suggestions = [];
  if (isset($variables['element']['#form_element_type'])) {
    $suggestions[] = 'form_element_label__type__' . $variables['element']['#form_element_type'];
  }
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element_label__form-id__' . $variables['element']['#form_id'];
  }
  if (isset($variables['element']['#form_element_type']) && isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element_label__' . $variables['element']['#form_id'] . '__' . $variables['element']['#form_element_type'];
  }
}

/**
 * Implements hook_preprocess_form_element().
 *
 * Copied from the themable forms module 8.x-1.0-beta1 release.
 *
 * @see https://www.drupal.org/project/themable_forms
 */
function drulma_preprocess_form_element(array &$variables) {
  if (!isset($variables['label'])) {
    return;
  }

  if (isset($variables['element']['#form_id'])) {
    $variables['label']['#form_id'] = $variables['element']['#form_id'];
  }
  if (isset($variables['element']['#type'])) {
    $variables['label']['#form_element_type'] = $variables['element']['#type'];
  }
}

/**
 * Implements hook_form_alter().
 *
 * Copied from the themable forms module 8.x-1.0-beta1 release.
 *
 * @see https://www.drupal.org/project/themable_forms
 */
function drulma_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  drulma_attach_form_id($form, $form_id);
}

/**
 * Attaches form id to all form elements.
 *
 * Copied from the themable forms module 8.x-1.0-beta1 release.
 *
 * @param array $form
 *   The form or form element which children should have form id attached.
 * @param string $form_id
 *   The form id attached to form elements.
 *
 * @see https://www.drupal.org/project/themable_forms
 */
function drulma_attach_form_id(array &$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    drulma_attach_form_id($form[$child], $form_id);
  }
}

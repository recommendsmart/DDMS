<?php

/**
 * @file
 * Main file of the module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\keep_referenced_entities\KeepReferencedEntitiesManager;

/**
 * Implements hook_form_alter().
 */
function keep_referenced_entities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $appendix_length = strlen('_delete_form');
  // If it's form of deletion of the entity.
  if (substr($form_id, strlen($form_id) - $appendix_length, $appendix_length) == '_delete_form') {
    $co = $form_state->getBuildInfo()['callback_object'];
    // If entity can be received.
    if (method_exists($co, 'getEntity')) {
      $entity = $form_state->getBuildInfo()['callback_object']->getEntity();

      $kre_manager = new KeepReferencedEntitiesManager($entity);

      if ($references_list = $kre_manager->getReferencesList()) {
        $form['description'] = [
          '#markup' => $references_list,
        ];
        unset($form['actions']['submit']);
      }
    }
  }
}

/**
 * Implements hook_entity_predelete().
 */
function keep_referenced_entities_entity_predelete(EntityInterface $entity) {
  $kre_manager =  new KeepReferencedEntitiesManager($entity);
  if ($kre_manager->getReferencesList()) {
    // @todo add hook to be able to execute custom action.
    $url_to_references = Url::fromRoute(
      'keep_referenced_entities.referenced_entities',
      ['entity_type' => $entity->getEntityTypeId(), 'entity_id' => $entity->id()]
    )->toString();

    \Drupal::messenger()->addError(t(
      'This entity <a href="@entity_url">@entity_label</a> cannot be deleted. Details available by <a href="@url">link</a>.',
      [
        '@entity_label' => $entity->label(),
        '@entity_url' => $entity->toUrl()->toString(),
        '@url' => $url_to_references
        ]
    ));
    $url = Url::fromRoute('system.admin_content');
    $response = new RedirectResponse($url->toString());
    $response->send();
    exit;
  }
}

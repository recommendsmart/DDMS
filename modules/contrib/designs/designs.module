<?php

/**
 * @file
 * Provides the main code for the designs module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\designs\Element\RenderDesign;

/**
 * Implements hook_theme().
 */
function designs_theme() {
  return [
    'design' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function designs_library_info_build() {
  return \Drupal::service('plugin.manager.design')->getLibraryImplementations();
}

/**
 * Implements hook_preprocess().
 */
function designs_preprocess_design(&$variables, $hook) {
  $element = $variables['element'];

  /** @var \Drupal\designs\DesignInterface $design */
  if (!($design = $element['#design'])) {
    return;
  }

  // Allow design to be used just as a theme.
  if (is_string($design)) {
    $element = RenderDesign::preRenderDesign($element);
    if (!($design = $element['#design'])) {
      return;
    }
  }

  $plugin = $design->getPluginDefinition();

  // Provide the values needed for the design twig template.
  $variables['design'] = [
    'id' => $design->getPluginId(),
    'path' => $plugin->getPath() . '/' . $plugin->getTemplate(),
    'libraries' => $plugin->getRenderAttached(),
  ];

  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');

  // Get the settings to compare against.
  $settings = $design->getSettings();

  // Copy the element children to the variable for display.
  $variables['vars'] = [];
  foreach (Element::children($element) as $key) {
    // We are converting the render elements to markup in the variables, so
    // it will not be printed by the template.
    $result = (string) $renderer->render($element[$key]);

    // Add to the variables when applicable.
    if (isset($element[$key]['#attributes']) &&
      $element[$key]['#attributes'] instanceof Attribute) {
      $variables['vars'][$key] = &$element[$key]['#attributes'];
    }
    // Allow easier templating with settings being strings.
    // e.g. "if setting" rather than "if setting | render"
    elseif (isset($settings[$key])) {
      $variables['vars'][$key] = $result;
    }
    // Remove any element considered empty, this makes markup cleaner.
    // e.g. "if contents" rather than "if contents | render"
    elseif ($result) {
      $variables['vars'][$key] = &$element[$key];
    }
  }

  // Allow unused content regions to be displayed.
  if (!empty($element['#unused'])) {
    $variables['unused'] = $element['#unused'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function designs_theme_suggestions_design(array $variables) {
  $suggestions = [];
  $element = $variables['element'];
  /** @var \Drupal\designs\DesignInterface|string|null $design */
  $design = $element['#design'] ?? NULL;
  if ($design) {
    if (is_string($design)) {
      $plugin = \Drupal::service('plugin.manager.design')->getDefinition($design);
    }
    else {
      $plugin = $design->getPluginDefinition();
    }
    $suggestions[] = 'design__' . $plugin->getTemplateId();
  }
  return $suggestions;
}

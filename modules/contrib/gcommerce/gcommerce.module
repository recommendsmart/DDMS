<?php

/**
 * @file
 * Contains group.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\group\Entity\GroupContentType;

/**
 * Implements hook_ENTITY_TYPE_access() for commerce_store.
 */
function gcommerce_commerce_store_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $groupContentEnablerId = 'group_store';
  return gcommerce_permission_access_check($entity, $operation, $account, $groupContentEnablerId);
}

/**
 * Implements hook_ENTITY_TYPE_access() for commerce_product.
 */
function gcommerce_commerce_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $groupContentEnablerId = 'group_product';
  return gcommerce_permission_access_check($entity, $operation, $account, $groupContentEnablerId);
}

/**
 * Implements hook_ENTITY_TYPE_access() for commerce_promotion.
 */
function gcommerce_commerce_promotion_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $groupContentEnablerId = 'group_promotion';
  return gcommerce_permission_access_check($entity, $operation, $account, $groupContentEnablerId);
}

/**
 * Implements hook_ENTITY_TYPE_access() for commerce_product.
 */
function gcommerce_commerce_order_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $groupContentEnablerId = 'group_order';
  return gcommerce_permission_access_check($entity, $operation, $account, $groupContentEnablerId);
}

/**
 * Access check for group's inside permissions.
 *
 * Steal from gnode_node_access() and made minimized modification.
 */
function gcommerce_permission_access_check(EntityInterface $entity, $op, AccountInterface $account, $groupContentEnablerId) {

  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new nodes, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($entity->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = $groupContentEnablerId . ':' . $entity->bundle();

  // Only act if there are group content types for this node type.
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Load all the group content for this entity.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $entity->id(),
    ]);

  // If the entity does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the operation.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($group->hasPermission("view $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission("$op any $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
        elseif ($account->id() == $entity->getOwnerId() && $group->hasPermission("$op own $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  // Instead of outright forbidding access when no group granted it, we return
  // a neutral access result to play nice with other modules. If the end result
  // is still neutral, Drupal will deny access anyway unless the node grants
  // system allows the operation in a last ditch effort to determine access.
  return AccessResult::neutral();
}

/**
 * DO NOT EDIT THIS FILE.
 * See the following change record for more information,
 * https://www.drupal.org/node/2815083
 * @preserve
 **/

(function ($, Drupal) {
  'use strict';

  Drupal.modal_block = {};

  Drupal.modal_block.instances = {};

  // In this object we store unchanged visit objects.
  // If on page exist more than one modal block with the same cookie name
  // it is possible that visit cookie will be updated more than once.
  // So to prevent this, before updating cookie,
  // we store unchanged visit object here.
  Drupal.modal_block.visits = {};

  Drupal.behaviors.modalBlock = {
    attach: function (context, settings) {
      if (settings && settings.modal_block) {
        Object.keys(settings.modal_block || {}).forEach(function (i) {
          var selector = '.modal-block[data-modal-block-id="' + i + '"]';
          $(selector).once('modal-block').each(function () {
            Drupal.modal_block.instances = new Drupal.modal_block.modalBlock($(this), settings.modal_block[i]);
          });
        });
      }
    },
    detach: function (context, settings, trigger) {
      if (trigger === 'unload') {
        if (settings && settings.modal_block) {
          Object.keys(settings.modal_block || {}).forEach(function (i) {
            var selector = '.modal-block[data-modal-block-id="' + i + '"]';
            if ($(selector, context).length && Drupal.modal_block.instances[i]) {
              Drupal.modal_block.instances[i].detachModalBlockEvent();
              delete Drupal.modal_block.instances[i];
              delete settings.modal_block[i];
            }
          });
        }
      }
    }
  };


  Drupal.modal_block.modalBlock = function (element, settings) {
    this.$element = $(element);
    this.options = $.extend({}, this.getDefaultOptions(), settings);
    this.options.cookie.expires = new Date(Date.now() + this.options.cookie.expires * 1000);
    this.visit = Drupal.modal_block.visits[this.options.cookie.name] || this.getVisitObject();
    this.registerModalBlock();
  };

  /**
   * Checking if last visit expired and need to process current.
   * If expired, then:
   *  - if current visit active attach modal block event
   *    without updating visit number because we want to be sure that modal
   *    has been showed for user. If user leaved current page
   *    and modal did not show, then it will showed on next page visit.
   *  - if not then increase visit number and store it in cookie.
   */
  Drupal.modal_block.modalBlock.prototype.registerModalBlock = function () {
    if (this.isLastVisitExpired()) {
      if (this.isVisitNumberActive()) {
        this.attachModalBlockEvent();
      }
      else {
        this.increaseVisitsNumber();
      }
    }
  };
  /**
   * Fetching visit object from cookie or init it by default data.
   * @returns {*|{number: number, last: number}}
   */
  Drupal.modal_block.modalBlock.prototype.getVisitObject = function () {
    // Try to fetch from cookie
    // and if cookie does not exist - set visit object initial values.
    var cookie_json = $.cookie.json;
    $.cookie.json = true;
    var visit = $.cookie(this.options.cookie.name) || {number: 1, expires: 0};
    visit.number = parseInt(visit.number);
    $.cookie.json = cookie_json;
    return visit;
  };

  /**
   * Checking if since the last visit,
   * the time has passed more than in the settings.
   *
   * @returns {boolean}
   */
  Drupal.modal_block.modalBlock.prototype.isLastVisitExpired = function () {
    return this.visit.expires < Date.now();
  };

  /**
   * Checking if current visit number is active and need to show modal block.
   * @returns {*}
   */
  Drupal.modal_block.modalBlock.prototype.isVisitNumberActive = function () {
    // First modal appearance did not happen yet.
    if (this.visit.number <= this.options.block.first) {
      // check if current visit is equal first appearance number.
      return this.visit.number === this.options.block.first;
    }

    // If modal block configured for modal appearance at every N visit, then
    // checking if current visit is multiple N from settings
    if (this.options.block.periodicity.length === 1) {
      if (this.options.block.periodicity[0]) {
        return (this.visit.number + this.options.block.first) % this.options.block.periodicity[0] === 0;
      }
    }
    else {
      // Block configured for custom modal appearance.
      // Walk over appearance array to see if current visit is active.
      for (var i = 0; i < this.options.block.periodicity.length; i++) {
        if (this.visit.number === this.options.block.periodicity[i]) {
          return true;
        }
      }
    }

    return false;
  };

  /**
   * Increase visits number and store unchanged value in static cache
   * to avoid repeated increasing in case if on page exit two and more
   * modal blocks with the same cookie name.
   */
  Drupal.modal_block.modalBlock.prototype.increaseVisitsNumber = function () {
    // Other modal block instance with the same cookie name already increased
    // visit number, so does not need to perform any modifications.
    if (Drupal.modal_block.visits[this.options.cookie.name]) {
      return;
    }
    // Store unchanged visit object in static cache, to prevent fetching new
    // visit object which is not valid for current page visit.
    Drupal.modal_block.visits[this.options.cookie.name] = this.visit;
    var new_visit = {
      expires: Date.now() + this.options.block.visit_duration * 1000,
      number: this.visit.number + 1
    };
    var cookie_json = $.cookie.json;
    $.cookie.json = true;
    $.cookie(this.options.cookie.name, new_visit, this.options.cookie);
    $.cookie.json = cookie_json;
  };

  /**
   * Showing modal block dialog and increasing visits number.
   */
  Drupal.modal_block.modalBlock.prototype.showModalBlock = function () {
    if (this.options.block.is_ajax) {
      console.log('before click');
      this.$element.click();
      console.log(this.$element);
    }
    else {
      var dialog = Drupal.dialog(this.$element, this.options.dialog);
      if (this.options.dialog.modal) {
        dialog.showModal();
      }
      else {
        dialog.show();
      }
    }
    // @todo for ajax modal need to check if it have time to load and display content to user
    // We consider like modal block displayed to user and increasing visits number.
    this.increaseVisitsNumber();
  };

  /**
   * Attaching appropriate modal block event depending on settings.
   */
  Drupal.modal_block.modalBlock.prototype.attachModalBlockEvent = function () {
    if (this.options.block.event === 'load') {
      this.timeout_id = setTimeout($.proxy(this.showModalBlock, this), this.options.block.delay);
    }
    else {
      $(document).on('mouseleave.' + this.options.block.id, function (e) {
        // Reliable, works on mouse exiting window and
        // user switching active program
        if (e.relatedTarget || e.toElement) {
          return;
        }
        // Get the current viewport width.
        var vpWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        // Show modal if the current mouse X position
        // is not within 50px of the right (trying to omit scroll bar click event)
        // edge of the viewport and if the current mouse Y position
        // is within 50px of the top edge of the viewport.
        if (e.clientX >= (vpWidth - 50) && e.clientY <= 50) {
          e.data.modal_block.showModalBlock();
        }
      }, {modal_block: this});
    }
  };

  /**
   * Detaching modal block events.
   */
  Drupal.modal_block.modalBlock.prototype.detachModalBlockEvent = function () {
    if (this.options.block.event === 'load') {
      clearTimeout(this.timeout_id);
    }
    else {
      $(document).off('mouseleave.' + this.options.block.id);
    }
  };
  /**
   * Just to be sure modal options is valid, merge options from drupal settings
   * with default.
   *
   * @returns {{block: {is_ajax: boolean, event: string, delay: number, first: number, periodicity: Array, visit_duration: number}, cookie: {name: string, path: string, expires: string}, dialog: {}}}
   */
  Drupal.modal_block.modalBlock.prototype.getDefaultOptions = function () {
    return {
      block: {
        is_ajax: false,
        event: 'load',
        delay: 5000,
        first: 1,
        periodicity: [],
        visit_duration: 0
      },
      cookie: {
        name: 'modal_block_default',
        path: '/',
        expires: ''
      },
      dialog: {}
    };
  };

})(jQuery, Drupal);


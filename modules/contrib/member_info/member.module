<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\TermStorage;
/**
 * 设定用户类型
 */
function get_user_type() {
  return [
    0 => '不区分',
    1 => '前端',
    2 => '后端',
  ];
}


function getSpecifyCompanyofDeparts($tid = NULL) {
  if (empty($tid)) {
    return NULL;
  }
  $pm = taxonomy_term_load($tid);
  $entity_manager = \Drupal::service('entity.manager')->getStorage('taxonomy_term');
  $childs = $entity_manager->loadTree('enterprises', $tid, NULL, TRUE);
  $options = [];
  foreach ($childs as $row) {
    $parent = current($entity_manager->loadParents($row->id()));
    $options[$row->id()]['id'] = $row->id();
    $options[$row->id()]['name'] = $row->label();
    $options[$row->id()]['weight'] = $row->get('weight')->value;
    if ($parent) {
      $options[$row->id()]['parent'] = $parent->id();
    }
  }
  $tree = getDepartmentTaxonomyTree($options, $pm->id());
  $tree = [
    0 => '请选择所属部门',
  ] + $tree;
  return $tree;

}


function getDepartmentTaxonomyTree($data, $pid = 0, $level = 0) {
  static $list = [];
  foreach ($data as $row) {
    if ($row['parent'] == $pid) {
      $list[$row['id']] = '|' . str_repeat('-', $level+1) . $row['name'];
      getDepartmentTaxonomyTree($data, $row['id'], $level+1);
    } else {
      continue;
    }
  }
  return $list;
}

/**
 * Implement hook_form_FORM_ID_alter().
 *
 * @see \Drupal\user\RegistForm
 */
function member_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $form['language']['preferred_langcode']['#title'] = t('Preferred language');
  //获取当前操作的form对象
  $form_obj = $form_state->getFormObject();
  //获取当前操作的实体
  $user_entity = $form_obj->getEntity();


  $form['information'] = ['#type' => 'container'];

  //进行修改操作,只能进行后台修改
  if(!$user_entity->isNew()) {
    $user_id = $user_entity->id();
    $user_company = $user_entity->get('company')->value;
    $user_depart = $user_entity->get('depart')->value;

    $entity_manager = \Drupal::service('entity.manager')->getStorage('taxonomy_term');
    // 获取公司信息
    $enterprises = $entity_manager->loadTree('enterprises', 0, 1, TRUE);
    $companies = [
      '请选择所属公司',
    ];
    foreach($enterprises as $row) {
      $companies[$row->id()] = $row->label();
    }
    if(\Drupal::currentUser()->hasPermission('administrater user company and depart permission')){
      $form['information']['user_type'] = [
        '#type' => 'fieldset',
        '#title' => t('选择用户类型'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      ];

      $form['information']['user_type']['company'] = [
        '#type' => 'select',
        '#title' => t('公司名称'),
        '#options' => $companies,
        '#default_value' => $user_company,
        '#description' => t('用户的公司信息'),
      ];
      if ($user_company != 0) {
        $format_departs = getSpecifyCompanyofDeparts($user_company);
        // @todo
        // 当部门被调整到用户所属公司之外时，需要重新清空当前用户的部门属性
        //if (isset($format_departs[$user_depart])) {
          $form['information']['user_type']['depart'] = [
            '#type' => 'select',
            '#title' => t('所属部门'),
            '#options' => $format_departs,
            '#default_value' => $user_depart,
            '#description' => t('用户的部门信息'),
          ];
        //}

      }

      $form['information']['user_type']['realname'] = [
        '#type' => 'textfield',
        '#title' => t('真实姓名'),
        '#default_value' => $user_entity->get('realname')->value,
      ];
    }
  }

  $form['#entity_builders'][] ='setFormValueToEntity';
}

/**
 *
 * @param $entityId
 *   实体id
 * @param $entity EntityInterface
 *   @see Drupal\user\user
 *
 * @param $form
 *  表单
 *
 * @param $form_state
 * 存储表单值
 */
function setFormValueToEntity($entityId, $entity, $form, $form_state) {
  $entity->company = $form_state->getValue('company');
  $entity->depart = $form_state->getValue('depart');
  $entity->realname = $form_state->getValue('realname');
}

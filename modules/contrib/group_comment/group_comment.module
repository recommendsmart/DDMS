<?php

/**
 * @file
 * Group comment module.
 */

declare(strict_types = 1);

use Drupal\comment\CommentForm;
use Drupal\comment\CommentInterface;
use Drupal\comment\CommentTypeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group_comment\CommentedEntityHelper;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function group_comment_comment_type_insert(CommentTypeInterface $comment_type): void {
  \Drupal::service('plugin.manager.group_content_enabler')->clearCachedDefinitions();
}

/**
 * Implements hook_entity_operation().
 */
function group_comment_entity_operation(EntityInterface $entity): array {
  $operations = [];

  if ($entity->getEntityTypeId() === 'group' && \Drupal::moduleHandler()->moduleExists('views')) {
    /** @var \Drupal\group\Entity\GroupInterface $entity */
    if ($entity->hasPermission('access group_comment overview', \Drupal::currentUser())) {
      /** @var \Symfony\Component\Routing\RouterInterface $router */
      $router = \Drupal::service('router.no_access_checks');
      if ($router->getRouteCollection()->get('view.group_comments.page') !== NULL) {
        $operations['comments'] = [
          'title' => t('Comments'),
          'weight' => 20,
          'url' => Url::fromRoute('view.group_comments.page', ['group' => $entity->id()]),
        ];
      }
    }
  }

  return $operations;
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function group_comment_comment_create_access(AccountInterface $account, array $context, $entity_bundle): AccessResultInterface {
  // Load all group contents for this entity.
  $commented_entity = $context['commented_entity'] ?? NULL;
  if (!$commented_entity) {
    return AccessResult::neutral();
  }

  if ($groups = CommentedEntityHelper::getGroupsByEntity($commented_entity)) {
    // Grant create access, when the commented entity belongs to at least one
    // group for which the account has the permission to create.
    $plugin_id = 'group_comment:' . $entity_bundle;
    foreach ($groups as $group) {
      if ($group->hasPermission("create $plugin_id entity", $account)) {
        return AccessResult::allowed()
          ->addCacheContexts(['user.group_permissions'])
          ->addCacheableDependency($commented_entity);
      }
    }
  }

  return AccessResult::neutral()->addCacheContexts(['user.group_permissions'])->addCacheableDependency($commented_entity);
}

/**
 * Implements hook_entity_insert().
 */
function group_comment_entity_insert(EntityInterface $entity): void {
  // React on inserting new comment or group_content (relation).
  // If a comment is inserted to a group or a grouped entity, then attach the
  // comment to the group.
  // If new group_content (relation) that has commentable target entity, is
  // inserted, then attach every comment (posted to the target entity) to all
  // groups of the target entity.
  if ($entity instanceof CommentInterface || $entity instanceof GroupContentInterface) {
    \Drupal::service('group_comment.group_attachment')->attach($entity);
  }
}

/**
 * Implements hook_entity_predelete().
 */
function group_comment_entity_predelete(EntityInterface $entity): void {
  // React on deleting a group_content.
  // If the target entity of the group_content is commentable and has comments,
  // all comments of the target entity should be detached from the group.
  if ($entity instanceof GroupContentInterface) {
    \Drupal::service('group_comment.group_attachment')->detach($entity);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Allow users to skip comments approval on the group level.
 */
function group_comment_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof CommentForm) {
    return;
  }

  $entity = $form_object->getEntity();
  if ($entity instanceof CommentInterface) {
    $commented_entity = $entity->getCommentedEntity();
    if (!$commented_entity instanceof ContentEntityInterface) {
      return;
    }

    // When the current user has the access right to skip comment approval in
    // any group, set the default value for status field to published.
    // @see \Drupal\comment\CommentForm::form.
    if ($groups = CommentedEntityHelper::getGroupsByEntity($commented_entity)) {
      $plugin_id = 'group_comment:' . $entity->bundle();
      foreach ($groups as $group) {
        if ($group->hasPermission("skip comment approval $plugin_id entity", \Drupal::currentUser())) {
          $form['author']['status']['#default_value'] = CommentInterface::PUBLISHED;
          break;
        }
      }
    }
  }
}

<?php

/**
 * @file
 * Form display visibility hooks and alters.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_widget_third_party_settings_form().
 *
 * @see \Drupal\field_ui\Form\EntityFormDisplayEditForm::thirdPartySettingsForm()
 */
function form_display_visibility_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element = $conditions = [];

  $field_settings = form_display_visibility_settings_getter($field_definition, $form_mode);
  $plugin_manager = \Drupal::service('plugin.manager.form_display_visibility_condition');
  foreach ($plugin_manager->getDefinitions() as $condition_plugin) {
    /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition */
    $condition = $plugin_manager->createInstance($condition_plugin['id'], ['field_settings' => $field_settings]);
    $conditions[$condition_plugin['id']] = $condition->buildForm();
  }

  if (!empty($conditions)) {
    $element['conditions'] = [
      '#type' => 'details',
      '#title' => t('Visibility Conditions'),
      '#open' => TRUE,
    ];
    $element['conditions'] += $conditions;
  }

  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 *
 * @see \Drupal\field_ui\Form\EntityFormDisplayEditForm::alterSettingsSummary()
 */
function form_display_visibility_field_widget_settings_summary_alter(array &$summary, array $context) {
  if ($conditions = $context['widget']->getThirdPartySetting('form_display_visibility', 'conditions')) {
    $plugin_manager = \Drupal::service('plugin.manager.form_display_visibility_condition');
    foreach ($conditions as $id => $condition) {
      /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition_plugin */
      $condition_plugin = $plugin_manager->createInstance($id, $conditions);
      $summary[] = $condition_plugin->displaySummary();
    }
  }
}

/**
 * Implements hook_field_widget_multivalue_form_alter().
 *
 * @see \Drupal\Core\Field\WidgetBaseInterface::form()
 */
function form_display_visibility_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();;
  $form_mode = form_display_visibility_filter_form_mode_helper($field_definition->getTargetEntityTypeId(), $form_state->getFormObject()->getOperation());

  if ($field_settings = form_display_visibility_settings_getter($field_definition, $form_mode)) {
    $plugin_manager = \Drupal::service('plugin.manager.form_display_visibility_condition');
    $plugin_definitions = $plugin_manager->getDefinitions();
    $access = AccessResult::allowed();
    foreach ($plugin_definitions as $condition_plugin) {
      /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition */
      $condition = $plugin_manager->createInstance($condition_plugin['id'], ['field_settings' => $field_settings]);
      $access = $access->andIf($condition->applyCondition());
    }

    $elements['#access'] = !$access->isForbidden();
  }
}

/**
 * Helper function that retrieves the current form mode for the operation.
 *
 * @param string $entity_type_id
 *   The entity type id.
 * @param string $form_mode_operation
 *   The operation.
 *
 * @return string
 *   The form mode, 'default' if none.
 */
function form_display_visibility_filter_form_mode_helper($entity_type_id, $form_mode_operation) {
  $form_modes = \Drupal::service('entity_display.repository')->getFormModes($entity_type_id);
  foreach ($form_modes as $form_mode => $form_info) {
    if ($form_mode_operation == $form_mode) {
      return $form_mode;
    }
  }

  return 'default';
}

/**
 * Helper function to get the form display settings.
 *
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 *   The field definition.
 * @param string $form_mode
 *   The form mode.
 *
 * @return array
 *   The field settings. Empty array if not found.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function form_display_visibility_settings_getter(FieldDefinitionInterface $field_definition, $form_mode) {
  if ($config_entity = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load($field_definition->getTargetEntityTypeId() . '.' . $field_definition->getTargetBundle() . '.' . $form_mode)) {
    return $config_entity->getComponent($field_definition->getName());
  }

  return [];
}

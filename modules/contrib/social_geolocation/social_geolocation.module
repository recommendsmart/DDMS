<?php

/**
 * @file
 * The Social Geolocation module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupType;
use Drupal\search_api\Query\QueryInterface;
use Drupal\Core\Locale\CountryManager;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enhance the Views exposed filter blocks forms.
 */
function social_geolocation_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $filter_forms = [
    'views-exposed-form-search-all-page',
    'views-exposed-form-search-all-page-no-value',
    'views-exposed-form-search-content-page',
    'views-exposed-form-search-content-page-no-value',
    'views-exposed-form-search-users-page',
    'views-exposed-form-search-users-page-no-value',
    'views-exposed-form-search-groups-page',
    'views-exposed-form-search-groups-page-no-value',
    'views-exposed-form-user-admin-people-page-1',
  ];

  if (!in_array($form['#id'], $filter_forms)) {
    return;
  }

  /** @var \Drupal\geolocation\GeocoderInterface $geocoder_plugin */
  $provider = \Drupal::service('plugin.manager.geocoder.provider')->getPlugins();
  if (empty($provider)) {
    return;
  }

  $unit_of_measurement = \Drupal::config('social_geolocation.settings')->get('unit_of_measurement');

  $form['location_details'] = [
    '#title' => t('Location range'),
    '#type' => 'details',
    '#weight' => 50,
  ];
  $form['location_details']['proximity'] = [
    '#type' => 'number',
    '#title' => t('Distance (@unitOfMeasurement)', ['@unitOfMeasurement' => $unit_of_measurement]),
    '#description' => t('Recommended range from 10 to 1000.'),
    '#min' => 0,
    '#max' => 10000,
    '#weight' => 10,
  ];

  $identifier = 'proximity';

  /** @var \Drupal\geolocation\GeocoderInterface $geocoder_plugin */
  $geocoder_plugin = \Drupal::service('plugin.manager.geolocation.geocoder')->getGeocoder(
    'nominatim',
    []
  );

  if (empty($geocoder_plugin)) {
    return;
  }

  if (!empty($geocoder_plugin)) {
    $geocoder_plugin->formAttachGeocoder($form, $identifier);
  }

  $form['geolocation_geocoder_address']['#description'] = '';

  $form['location_details']['geolocation_geocoder_address'] = $form['geolocation_geocoder_address'];
  unset($form['geolocation_geocoder_address']);
  $form['location_details']['geolocation_geocoder_address']['#title'] = t('Location');
  $form['location_details']['geolocation_geocoder_address']['#placeholder'] = t('City, Country');

  $form[$identifier . '-lat']['#type'] = 'hidden';
  $form[$identifier . '-lng']['#type'] = 'hidden';

  $form = array_merge_recursive($form, [
    '#attached' => [
      'library' => [
        'core/drupal.ajax',
        'geolocation/geolocation.views.filter.geocoder',
        'social_geolocation/social_geolocation.location',
      ],
      'drupalSettings' => [
        'geolocation' => [
          'geocoder' => [
            'viewsFilterGeocoder' => [
              $identifier => [
                'type' => 'proximity',
              ],
            ],
          ],
        ],
      ],
    ],
  ]);

  switch ($form['#id']) {

    case 'views-exposed-form-user-admin-people-page-1':
      $form['field_profile_geolocation_proximity']['#type'] = 'hidden';
      $form['field_profile_geolocation_proximity-lat']['#type'] = 'hidden';
      $form['field_profile_geolocation_proximity-lng']['#type'] = 'hidden';
      $form['location_details']['geolocation_geocoder_address']['#size'] = 30;

      unset($form['location_details']['proximity']['#description']);
      unset($form['location_details']['geolocation_geocoder_address']['#description']);
      if (isset($form['center'])) {
        unset($form['center']);
      }
      break;

    case 'views-exposed-form-search-content-page':
    case 'views-exposed-form-search-content-page-no-value':
      $form['location_details']['#states'] = [
        'visible' => [
          ':input[name=type]' => [
            'value' => 'event',
          ],
        ],
      ];
      break;
  }

  $form['#validate'][] = '_social_geolocation_form_views_exposed_form_validate';
}

/**
 * Validate function for search exposed form.
 */
function _social_geolocation_form_views_exposed_form_validate(&$form, FormStateInterface $form_state) {
  // Address is a string filled into the exposed views filter.
  $address = $form_state->getValue('geolocation_geocoder_address');

  if (empty($address)) {
    return;
  }

  // Pass the arguments to be able to get values in search_api_db_query_alter.
  $args = \Drupal::request()->query;

  if (empty($form_state->getValue('proximity'))) {
    $form['proximity']['#value'] = 20;
    $args->set('proximity', 20);
    $form_state->setValue('proximity', 20);
  }

  $address_geocoded = _social_geolocation_geocode_address($address);
  if (!empty($address_geocoded)) {
    // Modify the form to alter the results.
    $form_state->setValue('proximity-lat', $address_geocoded['lat']);
    $form_state->setValue('proximity-lng', $address_geocoded['lng']);

    // Set values for proximity VIEWS.
    $form_state->setValue(['field_profile_geolocation_proximity', 'value'], $form_state->getValue('proximity'));

    $form_state->setValue(
      [
        'field_profile_geolocation_proximity',
        'center',
        'coordinates',
        'lat',
      ],
      $address_geocoded['lat']
    );

    $form_state->setValue(
      [
        'field_profile_geolocation_proximity',
        'center',
        'coordinates',
        'lng',
      ],
      $address_geocoded['lng']
    );

    $form_state->setValue('field_profile_geolocation_proximity-lat', $address_geocoded['lat']);
    $form_state->setValue('field_profile_geolocation_proximity-lng', $address_geocoded['lng']);

    // Modify the page url to fix pagination and sharing.
    $args->set('proximity-lat', $address_geocoded['lat']);
    $args->set('proximity-lng', $address_geocoded['lng']);
  }
  else {
    $element = ['geolocation_geocoder_address'];

    if ($form['location_details'] !== NULL) {
      $element = $form['location_details']['geolocation_geocoder_address'];
    }

    $form_state->setError($element, t('Address "@address" not found or there is something wrong with the geolocation provider.', ["@address" => $address]));
  }
}

/**
 * Convert address to geolocation values.
 *
 * @param string $address
 *   The address that can be given to the Geocoder::geocode method.
 *
 * @return array
 *   An array with a status field and lat/lng values if a geolocation was found.
 */
function _social_geolocation_geocode_address($address) {
  if (empty($address) || !\Drupal::hasService('plugin.manager.geocoder.provider')) {
    return [];
  }

  /** @var \Drupal\geocoder\ProviderPluginManager $provider */
  $provider = \Drupal::service('plugin.manager.geocoder.provider');
  $provider_plugins = $provider->getPlugins();
  /** @var \Drupal\geocoder\Geocoder $geocoder */
  $geocoder = \Drupal::service('geocoder');

  $result = $geocoder->geocode($address, array_keys($provider_plugins));

  if (empty($result->first())) {
    return [];
  }

  return [
    'lat' => $result->first()->getLatitude(),
    'lng' => $result->first()->getLongitude(),
  ];
}

/**
 * Converts an address field value to a string for the Google Maps API.
 *
 * Uses specific entries from an address field to create a Google Maps API
 * compatible string. This avoids erroneous fields like langcode messing up the
 * string.
 *
 * @param array $address
 *   The address field value array.
 *
 * @return string
 *   The string that can be sent to the Google Maps API.
 */
function _social_geolocation_address_to_string(array $address) {
  $countries = CountryManager::getStandardList();

  $country = $address['country_code'];

  // If we have a valid country code we translate it to the full country name.
  // This is needed to ensure geocoding of countries without address works.
  if (isset($countries[$country])) {
    $country = $countries[$country];
  }

  $formatted_address = [
    $country,
    str_replace($address['country_code'] . '-', '', $address['administrative_area']),
    $address['locality'],
    $address['dependent_locality'],
    $address['postal_code'],
    $address['address_line1'],
  ];

  return implode(', ', array_filter($formatted_address));
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * Enhance the Views exposed filter blocks.
 */
function social_geolocation_block_view_views_exposed_filter_block_alter(array &$build, BlockPluginInterface $block) {
  $filter_blocks = [
    'search_all-page',
    'search_groups-page',
  ];

  if (in_array($build['#derivative_plugin_id'], $filter_blocks)) {
    // Disable cache for exposed filter block to get correct current path,
    // which is used in $form['#action'].
    $build['#cache'] = [
      'max-age' => 0,
    ];
  }
}

/**
 * Implements hook_search_api_db_query_alter().
 */
function social_geolocation_search_api_db_query_alter(SelectInterface $db_query, QueryInterface $query) {

  // If there are no arguments for proximity there is nothing to do.
  if (empty($args = \Drupal::request()->query->all())) {
    return;
  }
  foreach (['proximity', 'proximity-lat', 'proximity-lng'] as $key) {
    if (empty($args[$key])) {
      return;
    }
  }

  $unit_of_measurement = \Drupal::config('social_geolocation.settings')->get('unit_of_measurement');
  if ($unit_of_measurement === 'mi') {
    $args['proximity'] = $args['proximity'] * 1.609344;
  }

  $tables = $db_query->getTables();
  $index = $query->getIndex()->id();
  $table = 'search_api_db_' . $index;

  if (count($tables) == 1) {
    $aliases = array_keys($tables);
    $alias = reset($aliases);
  }
  else {
    $found = FALSE;

    foreach ($tables as $alias => $data) {
      if ($data['table'] == $table) {
        $found = TRUE;
        break;
      }
    }

    if (!$found) {
      return;
    }
  }

  if (\Drupal::currentUser()->isAnonymous()) {
    $group_types = GroupType::loadMultiple();
    $group_type_ids = [];

    /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
    foreach ($group_types as $group_type_id => $group_type) {
      if ($group_type->getAnonymousRole()->hasPermission('view group')) {
        $group_type_ids[] = $group_type_id;
      }
    }

    if ($index === 'social_all') {
      $source_field = $alias . '.search_api_datasource';
      $entity_type = 'entity:group';

      if (!empty($group_type_ids)) {
        $and = $db_query->andConditionGroup()
          ->condition($source_field, $entity_type)
          ->condition("$alias.group_type", $group_type_ids, 'IN');

        $or = $db_query->orConditionGroup()
          ->condition($source_field, $entity_type, '<>')
          ->condition($and);

        $db_query->condition($or);
      }
      else {
        $db_query->condition($source_field, $entity_type, '<>');
      }
    }

    if ($index === 'social_groups') {
      if (!empty($group_type_ids)) {
        $db_query->condition("$alias.type", $group_type_ids, 'IN');
      }
      else {
        return;
      }
    }
  }

  if (count($tables) == 1 && !is_string($tables[$alias]['table'])) {
    $new_alias = $alias . '_base';
    $db_query->join($table, $new_alias, "$alias.item_id = $new_alias.item_id");
    $alias = $new_alias;
  }

  $snippet = '';

  $entity_types = [
    'social_content' => 'node',
    'social_groups' => 'group',
    'social_users' => 'profile',
  ];
  if ($index === 'social_all') {
    $entity_types = array_values($entity_types);
  }
  else {
    $entity_types = [$entity_types[$index]];
  }

  foreach ($entity_types as $id => $entity_type) {
    if ($id) {
      $snippet .= ') OR (';
    }

    $snippet .= "( $alias.search_api_datasource = 'entity:$entity_type' ) AND (
      ( ACOS(LEAST(1,
        :filter_latcos
        * $alias.{$entity_type}_lat_cos
        * COS( :filter_lng - $alias.{$entity_type}_lng_rad  )
        +
        :filter_latsin
        * $alias.{$entity_type}_lat_sin
      )) * :earth_radius
    ) < :proximity )";
  }

  $db_query->where("(( $snippet ))", [
    ':filter_latcos' => cos(deg2rad($args['proximity-lat'])),
    ':filter_lng' => deg2rad($args['proximity-lng']),
    ':filter_latsin' => sin(deg2rad($args['proximity-lat'])),
    // @todo convert to miles see proximity.php
    ':earth_radius' => 6371,
    ':proximity' => $args['proximity'],
  ]);
}

<?php

/**
 * @file
 * Install, update and uninstall functions for the social_course module.
 */

use Drupal\user\Entity\Role;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_course.
 */
function social_course_install() {
  // Set some default permissions.
  _social_course_set_permissions();
  // Add All courses menu link.
  _social_course_create_menu_links();
  // Hide unnecessary blocks.
  _social_course_course_blocks_fix();
  // Publish all groups.
  $storage = \Drupal::entityTypeManager()->getStorage('group');
  foreach ($storage->loadMultiple() as $entity) {
    if ($entity->hasField('status')) {
      $entity->get('status')->setValue(TRUE);
      $entity->save();
    }
  }
}

/**
 * Function to set permissions.
 */
function _social_course_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_course_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Return the permissions per role.
 *
 * @param string $role
 *   The role to get the permissions for.
 *
 * @return array
 *   A list of permissions.
 */
function _social_course_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = [];

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], [
    'use courses feature',
  ]);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], [
    'create course_advanced group',
    'create course_basic group',
    'create course_article content',
    'delete own course_article content',
    'edit own course_article content',
    'override course_article published option',
    'create course_video content',
    'delete own course_video content',
    'edit own course_video content',
    'override course_video published option',
    'create course_section content',
    'delete own course_section content',
    'edit own course_section content',
    'override course_section published option',
    'delete any course_article content',
    'edit any course_article content',
    'revert course_article revisions',
    'delete course_article revisions',
    'view course_article revisions',
    'override course_article revision log entry',
    'override course_article authored by option',
    'override course_article authored on option',
    'override course_article promote to front page option',
    'override course_article revision option',
    'override course_article sticky option',
    'delete any course_video content',
    'edit any course_video content',
    'revert course_video revisions',
    'delete course_video revisions',
    'view course_video revisions',
    'override course_video revision log entry',
    'override course_video authored by option',
    'override course_video authored on option',
    'override course_video promote to front page option',
    'override course_video revision option',
    'override course_video sticky option',
    'delete any course_section content',
    'edit any course_section content',
    'revert course_section revisions',
    'delete course_section revisions',
    'view course_section revisions',
    'override course_section revision log entry',
    'override course_section authored by option',
    'override course_section authored on option',
    'override course_section promote to front page option',
    'override course_section revision option',
    'override course_section sticky option',
    'use text format text_only_html',
    'view unpublished groups',
  ]);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], []);

  return isset($permissions[$role]) ? $permissions[$role] : [];
}

/**
 * Function to create menu items.
 */
function _social_course_create_menu_links() {
  $menu_links = MenuLinkContent::loadMultiple();
  $parent = NULL;
  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_link */
  foreach ($menu_links as $menu_link) {
    if ($menu_link->label() === 'Explore' && $menu_link->isExpanded()) {
      $parent = 'menu_link_content:' . $menu_link->uuid();
    }
  }

  if (!is_null($parent)) {
    MenuLinkContent::create([
      'title' => t('All courses'),
      'link' => ['uri' => 'internal:/all-courses'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 19,
      'parent' => $parent,
    ])->save();
  }
}

/**
 * Hide unnecessary blocks.
 */
function _social_course_course_blocks_fix() {
  $storage = \Drupal::entityTypeManager()->getStorage('block');
  $plugin_ids = [
    'views_block:latest_topics-group_topics_block',
    'views_block:upcoming_events-upcoming_events_group',
  ];

  foreach ($plugin_ids as $plugin_id) {
    $blocks = $storage->loadByProperties([
      'plugin' => $plugin_id,
    ]);

    if ($block = current($blocks)) {
      $visibility = $block->get('visibility');
      $visibility['group_type'] = [
        'id' => 'group_type',
        'group_types' => [
          'course_advanced' => 'course_advanced',
          'open_group' => 'open_group',
          'closed_group' => 'closed_group',
        ],
        'negate' => FALSE,
        'context_mapping' => [
          'group' => '@group.group_route_context:group',
        ],
      ];
      $block->set('visibility', $visibility);
      $block->save();
    }
  }
}

/**
 * Allow users to use courses.
 */
function social_course_update_8001() {
  user_role_grant_permissions('authenticated', ['use courses feature']);
}

/**
 * Add "Status" field to "group" entity type.
 */
function social_course_update_8002() {
  $definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Published'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(TRUE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'string',
      'weight' => -5,
    ])
    ->setDisplayOptions('form', [
      'type' => 'default_widget',
      'weight' => -5,
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('status', 'group', 'group', $definition);
}

/**
 * Publish all groups.
 */
function social_course_update_8003(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_id'] = 0;
    $sandbox['max'] = \Drupal::database()
      ->query('SELECT COUNT(id) FROM {groups_field_data}')
      ->fetchField() - 1;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('group');
  $ids = \Drupal::database()
    ->select('groups_field_data', 'gfd')
    ->fields('gfd', ['id'])
    ->condition('gfd.id', $sandbox['current_id'], '>')
    ->range(0, 10)
    ->orderBy('gfd.id', 'ASC')
    ->execute()
    ->fetchCol();
  $groups = $storage->loadMultiple($ids);

  /** @var \Drupal\group\Entity\GroupInterface $group */
  foreach ($groups as $group) {
    $group->get('status')->setValue($group);
    $group->save();

    $sandbox['progress']++;
    $sandbox['current_id'] = $group->id();
  }

  $sandbox['#finished'] = $sandbox['max'] < 1 ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Add permission to view unpublished groups for the content manager role.
 */
function social_course_update_8004() {
  user_role_grant_permissions('contentmanager', ['view unpublished groups']);
}

/**
 * Open all courses.
 */
function social_course_update_8005(&$sandbox) {
  /** @var \Drupal\social_course\CourseWrapperInterface $course_wrapper */
  $course_wrapper = \Drupal::service('social_course.course_wrapper');

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_id'] = 0;
    $query = \Drupal::database()
      ->select('groups_field_data', 'gfd');
    $query->addExpression('COUNT(id)');
    $query->condition('gfd.type', $course_wrapper::getAvailableBundles(), 'IN');

    $sandbox['max'] = $query->execute()->fetchField() - 1;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('group');
  $ids = \Drupal::database()
    ->select('groups_field_data', 'gfd')
    ->fields('gfd', ['id'])
    ->condition('gfd.type', $course_wrapper::getAvailableBundles(), 'IN')
    ->condition('gfd.id', $sandbox['current_id'], '>')
    ->range(0, 10)
    ->orderBy('gfd.id', 'ASC')
    ->execute()
    ->fetchCol();
  $groups = $storage->loadMultiple($ids);

  /** @var \Drupal\group\Entity\GroupInterface $group */
  foreach ($groups as $group) {
    $time = \Drupal::time()->getCurrentTime();
    $date = \Drupal::service('date.formatter')->format($time, 'custom', "Y-m-d\TH:i:00");
    $group->get('field_course_opening_date')->value = $date;
    $group->save();
    $sandbox['progress']++;
    $sandbox['current_id'] = $group->id();
  }

  $sandbox['#finished'] = $sandbox['max'] < 1 ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Allow users to use courses.
 */
function social_course_update_8006() {
  user_role_grant_permissions('authenticated', ['use courses feature']);
}

/**
 * Delete course_section_navigation and course_material_navigation blocks.
 */
function social_course_update_8007() {
  $block_ids = [
    'course_section_navigation',
    'course_material_navigation',
    'course_material_hero',
  ];
  $entity_type_manager = \Drupal::entityTypeManager();
  if ($entity_type_manager->hasDefinition('block')) {
    $blocks = $entity_type_manager->getStorage('block')->loadByProperties(['plugin' => $block_ids]);
    foreach ($blocks as $block) {
      /** @var \Drupal\block\Entity\Block $block */
      $block->delete();
    }
  }
}

/**
 * Show profile hero block on My courses page
 */
function social_course_update_8008() {
  $config_name = 'block.block.socialblue_profile_hero_block';
  $config = \Drupal::service('config.factory')->getEditable($config_name);
  if (!empty($config->getRawData())) {
    $pages = $config->get('visibility.request_path.pages');
    $pages .= "\r\n/user/*/courses";
    $config->set('visibility.request_path.pages', $pages);
    $config->save();
  }
}

/**
 * Hide page title block from the user courses profile.
 */
function social_course_update_8009() {
  $configFactory = \Drupal::service('config.factory');
  $config_names = [
    'block.block.socialblue_pagetitleblock_content',
    'block.block.socialblue_profile_statistic_block',
  ];
  foreach ($config_names as $config_name) {
    $config = $configFactory->getEditable($config_name);
    if (!empty($config->getRawData())) {
      $pages = sprintf("%s\r\n/user/*/courses", $config->get('visibility.request_path.pages'));
      $config->set('visibility.request_path.pages', $pages);
      $config->save();
    }
  }
}


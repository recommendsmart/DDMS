<?php

namespace Drupal\dfinance\Plugin\Field\FieldWidget;

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\NumberWidget;
use Drupal\Core\Form\FormStateInterface;
use Drupal\currency\Entity\CurrencyInterface;
use Drupal\dfinance\Ajax\FinancialFieldCurrencyUpdate;

/**
 * Plugin implementation of the 'number' widget.
 *
 * @FieldWidget(
 *   id = "financial",
 *   label = @Translation("Financial field"),
 *   field_types = {
 *     "financial"
 *   }
 * )
 */
class FinancialWidget extends NumberWidget {

  /**
   * {@inheritDoc}
   */
  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
    $element = parent::formElement($items, $delta, $element, $form, $form_state); // TODO: Change the autogenerated stub

    $currency_reference_filed = $items->getSetting('currency')['currency_reference_field'];
    $entity = $items->getEntity();
    $currency_entity = NULL;

    if (empty($currency_reference_filed)) {
      $element['#disabled'] = TRUE;
      $this->messenger()->addError($this->t('The Currency Reference Field has not been set for the field %financial_field_id therefor it has been disabled, you must specify which field to use as the Currency Reference Field in the field settings for this field.', [
        '%financial_field_id' => $items->getFieldDefinition()->getName(),
      ]));
    }
    elseif (!$entity->hasField($currency_reference_filed)) {
      $element['#disabled'] = TRUE;
      $this->messenger()->addError($this->t('The field %required_field does not exist but is required by the Financial Field %financial_field_id, %financial_field_id has been disabled.', [
        '%required_field' => $currency_reference_filed,
        '%financial_field_id' => $items->getFieldDefinition()->getName(),
      ]));
    }
    else {
      $required_field = $entity->get($currency_reference_filed);
      $required_field_definition = $required_field->getFieldDefinition();
      if ($required_field_definition->getType() != 'entity_reference' || $required_field_definition->getSetting('target_type') != 'currency') {
        $element['#disabled'] = TRUE;
        $this->messenger()->addError($this->t('The Financial Field %financial_field_id requires the field %required_field however %required_field is either: not an Entity Reference field, or it is an Entity Reference field but it does not target the Currency Entity Type. %financial_field_id has been disabled.', [
          '%financial_field_id' => $items->getFieldDefinition()->getName(),
          '%required_field' => $currency_reference_filed,
        ]));
      }
      else {
        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $required_field */
        /** @var \Drupal\currency\Entity\CurrencyInterface $currency_entity */
        $currency_entity = count($required_field->referencedEntities()) > 0 ? $required_field->referencedEntities()[0] : NULL;
      }
    }

    // If the Currency Entity Reference Field value is a Currency set the Field Prefix for this field.
    $element['value']['#field_prefix'] = $this->getHtmlCurrencySign($currency_entity);

    // This library contains the custom jQuery function which is called via Ajax to update the currency
    // symbol in the field prefix any time the user changes Currency this field depends on.
    $form['#attached']['library'][] = 'dfinance/financial_field_currency_update';

    // This data- parameter is used by the above referenced jQuery function so it knows which Currency
    // Entity Reference Field this field depends on.
    $element['value']['#attributes']['data-dfinance-currency-field'] = $currency_reference_filed;

    // Similar to the above but used by PHP code in self::ajaxUpdateCurrencySymbol()
    $form['#dfinance_currency_fields'][$currency_reference_filed] = $currency_reference_filed;

    $form[$currency_reference_filed]['widget']['#ajax'] = [
      'callback' => [$this, 'ajaxUpdateCurrencySymbol'],
    ];

    return $element;
  }

  /**
   * AJAX Callback function which returns an AJAX Response instructing the updating of
   * currency symbols on Financial Fields which exist in the form.
   *
   * @param array $form
   *   Drupal form array.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   Form State.
   *
   * @return \Drupal\Core\Ajax\AjaxResponse
   *   The AJAX Response.
   *
   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
   */
  public function ajaxUpdateCurrencySymbol(array $form, FormStateInterface $form_state) {
    $response = new AjaxResponse();

    // Array containing the Field Names of Currency Entity Reference Fields which any Financial Fields present
    // in the form depend on.
    $currencyFieldNames = isset($form['#dfinance_currency_fields']) && is_array($form['#dfinance_currency_fields']) ? $form['#dfinance_currency_fields'] : [];

    // We need to loop for each of the Currency Entity Reference Fields
    foreach ($currencyFieldNames as $currency_field) {
      $currency_reference = $form_state->getValue($currency_field);
      if (!is_array($currency_reference)) {
        continue;
      }

      // Load the Currency Entity which the Entity Reference Field references.
      /** @var \Drupal\currency\Entity\CurrencyInterface $currency */
      $currency = \Drupal::entityTypeManager()->getStorage('currency')->load($currency_reference[0]['target_id']);

      $currency_sign = $this->getHtmlCurrencySign($currency);
      // We then add a new Ajax Command which will call the dfinanceFinancialFieldAjaxUpdateCurrencySymbol jQuery function found
      // in the dfinance/financial_field_currency_update library, along with the Currency Field Name we get the Currency Symbol
      // of the Currency Entity and pass that (via the Ajax command) to the jQuery function which will then update the Field
      // Prefix of all Financial Fields which are dependent on this Currency Entity Reference Field.
      $response->addCommand(new FinancialFieldCurrencyUpdate($currency_field, $currency_sign));
    }

    return $response;
  }

  /**
   * Takes a Currency Entity and returns the Sign e.g. $ or Â£ wrapped in HTML.
   *
   * We use this function for the #field_prefix for Financial Fields because there are cases where the
   * associated Currency Entity Reference Field is not set to any value (for example when first creating
   * a new Financial Document Entity or if the Entity Reference Field is set to a NULL value (none).
   * In these scenarios when the Entity Form is first built and the #field_prefix is empty the <span>
   * element which surrounds the prefix will not be returned, this means that the JavaScript function
   * called when the Currency Entity Reference Field value changes will not be able to find the field
   * prefix and so will not set the prefix to a currency symbol.  To solve this problem we always output
   * a <span> element, even if it is empty, so that Drupal will still render the #field_prefix and the
   * JavaScript will be able to set the currency sign.
   *
   * The above approach, while it technically works and is a simple solution, may not be ideal in the
   * long run because some themes will style the #field_prefix markup, and if there is no currency symbol
   * the prefix will be empty but will still have markup so will still be styled, which visually might not
   * be desirable.
   *
   * @todo discuss the above in https://www.drupal.org/project/dfinance/issues/3079554
   *
   * @param \Drupal\currency\Entity\CurrencyInterface|NULL $currency
   * @return string
   */
  protected function getHtmlCurrencySign(CurrencyInterface $currency = NULL) {
    $currency_sign = $currency instanceof CurrencyInterface ? PlainTextOutput::renderFromHtml($currency->getSign()) : '';
    return "<span class=\"currency-sign\">$currency_sign</span>";
  }

}
<?php

/**
 * @file
 * Entity version workflows module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\workflows\WorkflowInterface;

/**
 * Implements hook_form_alter().
 */
function entity_version_workflows_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'workflow_transition_add_form' || $form_id === 'workflow_transition_edit_form') {
    _entity_version_workflows_alter_transition_forms($form, $form_state, $form_id);
  }
}

/**
 * Handles the form alter for the workflow transition add/edit forms.
 *
 * @param object $form
 *   The form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 * @param string $form_id
 *   The ID of the form.
 */
function _entity_version_workflows_alter_transition_forms(&$form, FormStateInterface $form_state, $form_id): void {
  $workflow = $form_state->getFormObject()->getEntity();
  $values = isset($form['id']['#value']) ? $workflow->getThirdPartySetting('entity_version_workflows', $form['id']['#value']) : [];

  $form['version'] = [
    '#type' => 'details',
    '#title' => t('Version control'),
    '#description' => t('Select what should happen to the version number when this transition is used.'),
    '#open' => TRUE,
  ];

  $versions = [
    'major' => t('Major'),
    'minor' => t('Minor'),
    'patch' => t('Patch'),
  ];

  foreach ($versions as $version => $label) {
    $form['version'][$version] = [
      '#type' => 'select',
      '#title' => $label,
      '#default_value' => empty($values[$version]) ? '' : $values[$version],
      '#options' => [
        '' => t('Nothing'),
        'increase' => t('Increase'),
        'decrease' => t('Decrease'),
        'reset' => t('Reset'),
      ],
      '#required' => FALSE,
    ];
  }

  $form['version']['check_values_changed'] = [
    '#type' => 'checkbox',
    '#title' => t('Check values changed'),
    '#description' => t('Apply the rules above only if the entity field values have changed during the transition.'),
    '#default_value' => empty($values['check_values_changed']) ? 0 : $values['check_values_changed'],
    '#required' => FALSE,
  ];

  $form['#entity_builders'][] = 'entity_version_workflows_form_transition_add_form_builder';
}

/**
 * Entity builder for the transition configuration entity.
 *
 * @param string $entity_type
 *   The type of the entity.
 * @param \Drupal\workflows\WorkflowInterface $workflow
 *   The transition object.
 * @param object $form
 *   The form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function entity_version_workflows_form_transition_add_form_builder($entity_type, WorkflowInterface $workflow, &$form, FormStateInterface $form_state): void {
  $config_fields = [
    'major',
    'minor',
    'patch',
    'check_values_changed',
  ];
  $values = [];

  foreach ($config_fields as $field) {
    if ($form_state->getValue($field)) {
      $values[$field] = $form_state->getValue($field);
    }
  }

  if ($values) {
    $workflow->setThirdPartySetting('entity_version_workflows', $form_state->getValue('id'), $values);
    return;
  }

  $workflow->unsetThirdPartySetting('entity_version_workflows', $form_state->getValue('id'));
}

/**
 * Implements hook_entity_presave().
 */
function entity_version_workflows_entity_presave(EntityInterface $entity) {
  // Catch the node entity and update the entity version field.
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  $entity_version_storage = \Drupal::service('entity_type.manager')->getStorage('entity_version_settings');
  $version_field_setting = $entity_version_storage->load($entity->getEntityTypeId() . '.' . $entity->bundle());
  if (!$version_field_setting) {
    return;
  }

  $version_field = $version_field_setting->getTargetField();
  if (empty($version_field)) {
    return;
  }

  /** @var \Drupal\entity_version_workflows\EntityVersionWorkflowManager $entity_version_manager */
  $entity_version_handler = \Drupal::service('entity_version_workflows.entity_version_workflow_manager');
  $entity_version_handler->updateEntityVersion($entity, $version_field);
}

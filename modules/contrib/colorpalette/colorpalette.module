<?php

/**
 * @file
 * Defines necessary hooks, form_alters etc. for Color Palette interactions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Register color palette twig files.
 *
 * Implements hook_theme().
 */
function colorpalette_theme() {
  return [
    'colorpalette_colors' => [
      'render element' => 'form',
    ],
    'colorpalette_launch_button' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function colorpalette_form_taxonomy_term_colorpalette_colors_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Make color field as color-picker.
  $form['field_colorpalette_hexcode']['widget'][0]['value']['#type'] = 'color';

  // Add a validation handler.
  $form['field_colorpalette_hexcode']['#element_validate'][] = '_colorpalette_validate_unique_color';
}

/**
 * Validate a unique color while creating or editing a color taxonomy term.
 *
 * @param array $element
 *   The form element whose value is being validated.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $complete_form
 *   The complete form structure.
 *
 * @see colorpalette_form_taxonomy_term_colorpalette_filter_tags_form_alter()
 */
function _colorpalette_validate_unique_color(array &$element, FormStateInterface $form_state, array &$complete_form) {
  $hexcode = $form_state->getValue('field_colorpalette_hexcode');
  $utility = \Drupal::service('colorpalette.utility');

  // Throw field error if a color with hexcode already exists.
  if ($color_tid = $utility->isColorExisting($hexcode[0]['value'])) {

    // And not on editing page of existing color.
    if ($color_tid != $complete_form['tid']['#value']) {
      $color = $utility->loadColor($color_tid);
      $msg = t('Choose a different color value. Color %name already exits with value %hexcode.', [
        '%name' => $color->label(),
        '%hexcode' => $hexcode[0]['value'],
      ]);

      $form_state->setError($element, $msg);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function colorpalette_theme_suggestions_input_alter(array &$suggestions, array &$variables) {

  // Target fields using colorpalette widget.
  if (isset($variables["element"]['#attributes']['data-twig-suggestion'])
    && $variables["element"]['#attributes']['data-twig-suggestion'] == 'colorpalette') {

    $attribute = $variables["element"]['#attributes'];

    // Add theme suggestions.
    $suggestions[] = 'colorpalette_launch_button';

    // Initialize services.
    $utility = \Drupal::service('colorpalette.utility');
    $link_generator = \Drupal::service('link_generator');

    // Color palette launch URL options.
    $options = $utility->getDialogLinkOptions();

    // Add error class if input field has error.
    if (in_array('error', $attribute['class'])) {
      $options['attributes']['class'][] = 'error';
    }

    // Color palette launch URL.
    $url = Url::fromRoute(
      'colorpalette.colors',
      [
        'field_selector' => $attribute['data-drupal-selector'],
        'field_type' => $attribute['data-field-type'],
        'filter_tags' => $attribute['data-filter-tags'],
        'js' => 'nojs',
      ],
      $options
    );

    // Prepare hexcode value for current field launch button.
    $hexcode = NULL;
    if ($attribute['value']
      && $attribute['data-field-type'] == 'entity_reference') {
      preg_match('/.*\s\((\d+)\)$/', $attribute['value'], $matches);
      $color = \Drupal::service('colorpalette.utility')->loadColor($matches[1]);
      $hexcode = $color->field_colorpalette_hexcode->value;
    }
    else {
      $hexcode = $attribute['value'];
    }

    // Set variables.
    $variables['hexcode_str'] = $hexcode ? substr($hexcode, 1) : '';
    $variables['field_type'] = $attribute['data-field-type'];
    $variables['filter_tags'] = $attribute['data-filter-tags'];
    $variables['launch_button'] = $link_generator->generate(
      $variables['hexcode_str'] ? '' : '+',
      $url
    );

    // Unset unwanted attributes.
    // Additionally, unsetting 'required' attribute or will throw JS error.
    // Error: An invalid form control with name='field_xyz' is not focusable.
    unset(
      $variables['element']['#attributes']['data-field-type'],
      $variables['element']['#attributes']['data-filter-tags'],
      $variables['element']['#attributes']['data-twig-suggestion'],
      $variables['element']['#attributes']['required'],
    );
  }

}

<?php

/**
 * @file
 * Provides a list of often-used values of a field.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field_suggestion\Element\FieldSuggestionOperations;
use Drupal\user\EntityOwnerInterface;

/**
 * Implements hook_help().
 */
function field_suggestion_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  if ($route_name === 'help.page.field_suggestion') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Provides a list of often-used values of a field for
selecting one from them to automatically fill the field instead of filling the
field each time manually.') . '</p>';
  }

  return $output;
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function field_suggestion_field_widget_single_element_form_alter(
  array &$element,
  FormStateInterface $form_state,
  array $context
) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $context['items'];

  $config = \Drupal::config('field_suggestion.settings');
  $fields = (array) $config->get('fields');
  $entity = $items->getEntity();

  if (!isset($fields[$entity_type_id = $entity->getEntityTypeId()])) {
    return;
  }

  $field_name = $items->getName();

  if (!in_array($field_name, $fields[$entity_type_id])) {
    return;
  }

  $query = \Drupal::entityQueryAggregate($entity_type_id)
    ->addTag('field_suggestion')
    ->addMetaData('field_name', $field_name)
    ->addMetaData('entity', $entity);

  if ($config->get('own')) {
    $entity_type = $entity->getEntityType();

    if (
      is_subclass_of($entity_type->getClass(), EntityOwnerInterface::class) &&
      $entity_type->hasKey('owner')
    ) {
      $query->condition($entity_type->getKey('owner'), \Drupal::currentUser()->id());
    }
  }

  /** @var \Drupal\field_suggestion\Service\FieldSuggestionHelperInterface $helper */
  $helper = \Drupal::service('field_suggestion.helper');

  $ignored = $helper->ignored($entity_type_id, $field_name);

  $pinned = [];

  $ids = \Drupal::entityQuery('field_suggestion')
    ->condition('entity_type', $entity_type_id)
    ->condition('field_name', $field_name)
    ->execute();

  if (!empty($ids)) {
    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $manager */
    $manager = \Drupal::service('entity_field.manager');

    $field_type = $manager->getBaseFieldDefinitions($entity_type_id)[$field_name]
      ->getType();

    $storage = \Drupal::entityTypeManager()->getStorage('field_suggestion');

    foreach ($ids as $id) {
      /** @var \Drupal\field_suggestion\FieldSuggestionInterface $suggestion_entity */
      $suggestion_entity = $storage->load($id);

      $allow = TRUE;

      if ($suggestion_entity->hasExcluded()) {
        $hook = 'field_suggestion_exclude';
        $exclude = $suggestion_entity->getExcluded();

        foreach (\Drupal::moduleHandler()->getImplementations($hook) as $module) {
          $function = $module . '_' . $hook;

          if ($function($exclude, $entity)) {
            $allow = FALSE;

            break;
          }
        }
      }

      $value = $suggestion_entity->get('field_suggestion_' . $field_type)->value;

      if ($allow && $suggestion_entity->isOnce()) {
        $count = (int) \Drupal::entityQuery($entity_type_id)
          ->addTag('field_suggestion')
          ->addTag('field_suggestion_usage')
          ->addMetaData('field_name', $field_name)
          ->addMetaData('entity', $entity)
          ->condition($field_name, $value)
          ->range(0, 1)
          ->count()
          ->execute();

        if ($count === 1) {
          $allow = FALSE;
        }
      }

      if ($allow) {
        $pinned[] = $value;
      }
      else {
        $ignored[] = $value;
      }
    }
  }

  $ignored = array_unique(array_merge($ignored, $pinned));

  if (!empty($ignored)) {
    $query->condition($field_name, $ignored, 'NOT IN');
  }

  $values = $query
    ->sortAggregate($field_name, 'COUNT', 'DESC')
    ->groupBy($field_name)
    ->range(0, $config->get('limit'))
    ->execute();

  $values = array_column($values, $field_name);

  if (!empty($pinned)) {
    $values = array_merge($pinned, $values);
  }

  if (count($values) === 0) {
    return;
  }

  $element['suggestion'] = [
    '#type' => 'radios',
    '#title' => t('Suggestions'),
    '#ajax' => [
      'wrapper' => 'edit-' . $field_name . '-wrapper',
      'callback' => '_field_suggestion_ajax_callback',
    ],
  ];

  $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type_id);
  $renderer = \Drupal::service('renderer');

  foreach ($values as $delta => $value) {
    $element['suggestion']['#attributes']['data-suggestion-' . $delta] = $value;

    $ids = \Drupal::entityQuery($entity_type_id)
      ->condition($field_name, $value)
      ->range(0, 1)
      ->execute();

    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $storage->load(reset($ids));

    $sub_element = $view_builder->viewFieldItem($entity->$field_name->first());

    $element['suggestion']['#options'][] = $renderer->render($sub_element);
  }
}

/**
 * Implements hook_field_suggestion_exclude().
 */
function field_suggestion_field_suggestion_exclude(
  array $excluded_entities,
  ContentEntityInterface $entity
) {
  if (!$entity->isNew()) {
    foreach ($excluded_entities as $excluded_entity) {
      if (
        $excluded_entity['target_type'] === $entity->getEntityTypeId() &&
        $excluded_entity['target_id'] === $entity->id()
      ) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_entity_base_field_info().
 */
function field_suggestion_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() !== 'field_suggestion') {
    return $fields;
  }

  $items = (array) \Drupal::config('field_suggestion.settings')->get('fields');

  if (empty($items)) {
    return $fields;
  }

  $settings = ['exclude_entity_types' => FALSE];

  foreach (array_keys($items) as $entity_type_id) {
    $settings['entity_type_ids'][$entity_type_id] = $entity_type_id;

    $settings[$entity_type_id] = [
      'handler' => 'default:' . $entity_type_id,
      'handler_settings' => [
        'target_bundles' => NULL,
      ],
    ];
  }

  $fields['exclude'] = BaseFieldDefinition::create('dynamic_entity_reference')
    ->setLabel(t('Exclude'))
    ->setDescription(t('Entities list where this suggestion should be hidden
in the suggestions list.'))
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setSettings($settings)
    ->setDisplayOptions('form', ['weight' => 2]);

  return $fields;
}

/**
 * Implements hook_entity_operation().
 */
function field_suggestion_entity_operation(EntityInterface $entity) {
  $operations = [];
  $fields = (array) \Drupal::config('field_suggestion.settings')->get('fields');

  if (!empty($fields[$entity_type_id = $entity->getEntityTypeId()])) {
    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $manager */
    $manager = \Drupal::service('entity_field.manager');

    $definitions = $manager->getBaseFieldDefinitions($entity_type_id);
    $fields = array_flip($fields[$entity_type_id]);

    foreach ($definitions as $field => $definition) {
      if (isset($fields[$field])) {
        $fields[$field] = $definition->getType();
      }
    }

    $options = ['query' => \Drupal::destination()->getAsArray()];
    $actions = [TRUE => t('Unpin'), FALSE => t('Pin')];

    foreach ($fields as $field => $type) {
      $url = Url::fromRoute(
        'field_suggestion.pin',
        [
          'entity_type_id' => str_replace('_', '-', $entity_type_id),
          'entity_id' => $entity->id(),
          'field_name' => $field,
        ],
        $options
      );

      if ($url->access()) {
        $count = \Drupal::entityQuery('field_suggestion')
          ->condition('entity_type', $entity_type_id)
          ->condition('field_name', $field)
          ->condition('field_suggestion_' . $type, $entity->$field->value)
          ->range(0, 1)
          ->count()
          ->execute();

        $operations['field_suggestion_' . $field] = [
          'title' => t('@action %field', [
            '@action' => $actions[$unpin = $count > 0],
            '%field' => $field,
          ]),
          'url' => $url,
          'weight' => 100,
        ];
      }
    }

    if (count($operations) === 1) {
      $operations['field_suggestion_' . $field]['title'] = $actions[$unpin];
    }
  }

  return $operations;
}

/**
 * Implements hook_element_info_alter().
 */
function field_suggestion_element_info_alter(array &$info) {
  $info['operations']['#pre_render'][] = [
    FieldSuggestionOperations::class,
    'preRender',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function field_suggestion_preprocess_links__help(&$variables) {
  $titles = [
    'entity.field_suggestion.collection' => t('Pinned items'),
    'entity.field_suggestion_type.collection' => t('Supported field types'),
    'field_suggestion.settings' => t('Settings'),
  ];

  foreach ($variables['links'] as &$item) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['link']['#url'];

    if (isset($titles[$route_name = $url->getRouteName()])) {
      $item['link']['#title'] = $titles[$route_name];
    }
  }
}

/**
 * AJAX callback.
 *
 * @param array $form
 *   The form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The AJAX response.
 */
function _field_suggestion_ajax_callback(array $form, FormStateInterface $form_state) {
  $name = $form_state->getTriggeringElement()['#parents'][0];
  $attributes = $form[$name]['widget'][0]['suggestion']['#attributes'];
  $delta = $form_state->getValue([$name, 0, 'suggestion']);

  return (new AjaxResponse())->addCommand(new InvokeCommand(
    '#edit-' . $name . '-0-value',
    'val',
    [$attributes['data-suggestion-' . $delta]]
  ));
}

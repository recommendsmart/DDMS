<?php

/**
 * @file
 * File: system_tags_theme.module.
 */

declare(strict_types = 1);

use Drupal\node\NodeInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function system_tags_theme_theme_suggestions_html_alter(array &$suggestions, array $variables) {
  $suggestions = array_merge($suggestions, _system_tag_node_suggestions('html__system_tag__'));
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function system_tags_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $suggestions = array_merge($suggestions, _system_tag_node_suggestions('page__system_tag__'));
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function system_tags_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $suggestions = array_merge($suggestions, _system_tag_node_suggestions('node__system_tag__', $variables['elements']['#node']));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function system_tags_theme_preprocess_html(&$variables) {
  if ($suggestions = _system_tag_node_suggestions('system-tag--')) {
    if (!isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $suggestions);
  }
}

/**
 * Return theme suggestions based on the current node.
 *
 * @param string $prefix
 *   An optional prefix.
 * @param \Drupal\node\NodeInterface|null $node
 *   An optional node to work with.
 *
 * @return array
 *   Returns an array of suggestions, based on the current node.
 */
function _system_tag_node_suggestions($prefix = '', $node = NULL): array {
  $suggestions = [];

  if (!$node) {
    $node = \Drupal::routeMatch()->getParameter('node');
  }

  if ($node instanceof NodeInterface) {
    /** @var \Drupal\system_tags\SystemTagHelperInterface $systemTagHelper */
    $systemTagHelper = \Drupal::service('system_tags.system_tag_helper');
    foreach ($systemTagHelper->getReferenceFieldNames('node') as $field) {
      if (!$node->hasField($field)) {
        continue;
      }

      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $tags */
      $tags = $node->get($field);
      foreach ($tags->referencedEntities() as $tag) {
        $suggestions[] = $prefix . $tag->id();
      }
    }
  }

  return $suggestions;
}

<?php

use Drupal\transaction_workflow\Form\TransactionWorkflowTransactionForm;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\transaction\TransactionInterface;
use Drupal\transaction\Entity\TransactionType;

/**
 * Implements hook_entity_type_build().
 */
function transaction_workflow_entity_type_build(array &$entity_types) {
  // Add transaction workflow block form handler.
  if (!isset($entity_types['transaction'])) {
    return;
  }

  $entity_types['transaction']->setFormClass('transaction_workflow_block', TransactionWorkflowTransactionForm::class);
}

/**
 * Callback for allowed values in state string list fields.
 *
 * @see callback_allowed_values_function()
 */
function transaction_workflow_field_state_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $transaction_type = TransactionType::load($definition->getThirdPartySetting('transaction_workflow', 'transaction_type'));
  $all_states = $transaction_type->getThirdPartySetting('transaction_workflow', 'states', []);

  // Return all the allowed values if not in a transaction nor creating a new one.
  if (!$entity
    || !$entity instanceof TransactionInterface
    || !$entity->isNew()) {
    return $all_states;
  }

  // Only cacheable when all values returned.
  $cacheable = FALSE;

  /** @var \Drupal\transaction_workflow\TransactionWorkflowServiceInterface $workflow_service */
  $workflow_service = \Drupal::service('transaction_workflow');
  $current_state = $workflow_service->getCurrentState($entity->getTargetEntityId(), $transaction_type) ? : '';

  // Limit to the valid target states.
  $allwed_states = [];
  foreach ($workflow_service->getAllowedTransitions($current_state, $transaction_type) as $allwed_state_id) {
    $allwed_states[$allwed_state_id] = $all_states[$allwed_state_id];
  }

  return $allwed_states;
}

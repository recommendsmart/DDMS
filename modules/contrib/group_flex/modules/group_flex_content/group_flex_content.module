<?php

/**
 * @file
 * Group flex content module file.
 */

use Drupal\group_flex\Plugin\GroupVisibilityInterface;
use Drupal\group_flex_content\Plugin\GroupContentAccessControlHandler;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group_flex_content\QueryAccess\EntityQueryAlter;

/**
 * Implements hook_module_implements_alter().
 *
 * @see group_module_implements_alter()
 */
function group_flex_content_module_implements_alter(array &$implementations, string $hook) {
  // Make sure our query alters happen after the Group query alters.
  if ($hook === 'query_entity_query_alter') {
    // Move hook to the end of the list.
    $group_flex_content = $implementations['group_flex_content'];
    unset($implementations['group_flex_content']);
    $group = $implementations['group'];
    unset($implementations['group']);
    $implementations['group'] = $group;
    $implementations['group_flex_content'] = $group_flex_content;
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see group_query_entity_query_alter()
 */
function group_flex_content_query_entity_query_alter(SelectInterface $query) {
  $entity_type_id = $query->getMetaData('entity_type');
  if ($query->hasTag($entity_type_id . '_access')) {
    $entity_type_manager = Drupal::entityTypeManager();
    try {
      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    }
    catch (PluginNotFoundException $e) {
      return;
    }

    Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EntityQueryAlter::class)
      ->alter($query, $entity_type);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see group_query_views_entity_query_alter()
 */
function group_flex_content_query_views_entity_query_alter(SelectInterface $query) {
  $entity_type_id = $query->getMetaData('entity_type');
  $query->addTag($entity_type_id . '_access');
  group_flex_content_query_entity_query_alter($query);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function group_flex_content_form_group_content_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _group_flex_content_form_alter($form, $form_state);

  $group_content_type_form = $form_state->getBuildInfo()['callback_object'];

  /** @var \Drupal\group\Entity\GroupContentType $entity */
  if ($entity = $group_content_type_form->getEntity()) {
    $entity_id = $entity->id();

    $entity_count = Drupal::entityTypeManager()->getStorage('group_content')
      ->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', $entity_id)
      ->count()
      ->execute();

    // Only disable when there is already content.
    if (!empty($entity_count)) {
      $form['group_content_visibility']['#disabled'] = TRUE;
      $form['group_content_visibility']['#description'] = t('You can not change the visibility settings for this content plugin until you have removed all of the content of this type.');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function group_flex_content_form_group_content_type_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _group_flex_content_form_alter($form, $form_state);
}

/**
 * Alter the group content type forms.
 *
 * @param $form
 * @param $form_state
 */
function _group_flex_content_form_alter(&$form, $form_state) {
  $group_content_type_form = $form_state->getBuildInfo()['callback_object'];
  /** @var \Drupal\group\Entity\GroupContentTypeInterface $entity */
  if ($entity = $group_content_type_form->getEntity()) {
    $group_type = $entity->getGroupType();

    /** @var \Drupal\group_flex\GroupFlexGroupType $group_flex_type */
    $group_flex_type = Drupal::service('group_flex.group_type');
    if (!$group_flex_type->hasFlexEnabled($group_type)) {
      return;
    }

    /** @var Drupal\group\Plugin\GroupContentEnablerBase $plugin */
    $plugin = $entity->getContentPlugin();
    if ($plugin->getPluginDefinition()["id"] !== 'group_node') {
      return;
    }

    $default_visibility = group_flex_content_get_default_content_visibility();
    if (($pluginConfig = $entity->get('plugin_config')) && isset($pluginConfig['group_content_visibility'])) {
      $default_visibility = $pluginConfig['group_content_visibility'];
    }

    // The value will automatically be saved in the pluginConfig.
    $visibilityOptions = [
      'outsider' => t('Public'),
      'member' => t('Private'),
      'flexible' => t('Flexible'),
    ];
    $form['group_content_visibility'] = [
      '#title' => t('Group content visibility'),
      '#type' => 'radios',
      '#options' => $visibilityOptions,
      '#default_value' => $default_visibility,
    ];

    // When the group visibility is private disable this element.
    if ($group_flex_type->getGroupTypeVisibility($group_type) === GroupVisibilityInterface::GROUP_FLEX_TYPE_VIS_PRIVATE) {
      $form['group_content_visibility']['#disabled'] = TRUE;
      $form['group_content_visibility']['#description'] = t('Important: The group visibility is forced to "private", therefore the content visibility is forced to private in order to be consistent.');
      return;
    }

    // Let's add submit handler to handle the updated data.
    $form['actions']['submit']['#submit'][] = '_group_flex_content_type_submit';
  }
}

/**
 * Save the group content type.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _group_flex_content_type_submit(array $form, FormStateInterface $form_state) {
  $group_content_type_form = $form_state->getBuildInfo()['callback_object'];
  /** @var \Drupal\group\Entity\GroupContentType $entity */
  if ($entity = $group_content_type_form->getEntity()) {
    if ($entity->isNew()) {
      $plugin_id = $entity->getContentPluginId();
      /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
      $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
      $loaded_entity = $storage->loadByProperties([
        'content_plugin' => $plugin_id,
        'group_type' => $entity->getGroupTypeId(),
      ]);

      if (empty($loaded_entity)) {
        Drupal::messenger()->addError(t('Something went wrong with saving the content visibility.'));
        return;
      }
      $entity = reset($loaded_entity);

    }
    /** @var \Drupal\group_flex_content\GroupContentTypeSaver $group_content_type_saver */
    $group_content_type_saver = Drupal::service('group_flex_content.type_saver');
    $group_content_type_saver->save($entity, $form_state->getValue('group_content_visibility'));
  }
}

/**
 * Get all the content visibility values.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity.
 * @param bool $cacheable
 *   Whether the values are cacheable.
 *
 * @return array
 *   An array of values.
 */
function group_flex_content_get_content_visibility_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE): array {
  return [
    'outsider' => t('Public'),
    'member' => t('Private'),
  ];
}

/**
 * Get the default content visibility value.
 *
 * @return string
 *   The default content visibility string.
 */
function group_flex_content_get_default_content_visibility(): string {
  return 'outsider';
}

/**
 * Implements hook_group_content_info_alter().
 */
function group_flex_content_group_content_info_alter(array &$definitions) {
  /** @var Drupal\group\Plugin\GroupContentEnablerBase $definition */
  foreach ($definitions as $definition_id => $definition) {
    if ($definition['id'] === 'group_node') {
      $definition['handlers']['access'] = GroupContentAccessControlHandler::class;
      $definitions[$definition_id] = $definition;
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function group_flex_content_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    // Let's add a field for content visibility on the node itself.
    // Logic is handled by group_flex_content_form_alter. The form element may
    // also be removed in that function (if node is not being added to group)
    // The value itself is saved in group_flex_content_content_entity_submit().
    $fields['content_visibility'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Content visibility'))
      ->setSettings([
        'allowed_values' => [],
        'allowed_values_function' => 'group_flex_content_get_content_visibility_values',
      ])
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'weight' => 150,
        'label' => 'hidden',
      ]);
  }
  return $fields;
}

/**
 * Implements hook_form_alter().
 *
 * @see group_form_alter()
 */
function group_flex_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Let's see if our custom form element is present.
  if (!isset($form['content_visibility'])) {
    return;
  }

  // Making sure content visibility gets the correct options.
  $form['content_visibility']['widget']['#required'] = TRUE;
  unset($form['content_visibility']['widget']['#options']['_none']);
  $default_value = group_flex_content_get_default_content_visibility();

  // Assume we need to hide the field until proven otherwise.
  $hide_field = TRUE;

  /** @var \Drupal\group_flex\GroupFlexGroup $group_flex_group */
  $group_flex_group = Drupal::service('group_flex.group');

  // Scenario 1: New group content item is being created.
  if ($form_state->has('group_wizard') && $form_state->get('group_wizard_id') === 'group_entity') {
    // Check if the content_visibility needs to be added.
    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group = $form_state->get('group');
    $group_content_plugin = $form_state->get('group_content_enabler');
    $group_type = $group->getGroupType();

    $plugin = $group_type->getContentPlugin($group_content_plugin);
    $pluginConfig = $plugin->getConfiguration();

    // Show the field when group content visibility for plugin is flexible and
    // the group visibility is not private.
    if (isset($pluginConfig['group_content_visibility']) && $pluginConfig['group_content_visibility'] === 'flexible') {
      if ($group_flex_group->getGroupVisibility($group) !== GroupVisibilityInterface::GROUP_FLEX_TYPE_VIS_PRIVATE) {
        $hide_field = FALSE;
      }
    }
  }

  // Scenario 2: We are in the node form, let's check if group content exist.
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  if (($form_state->getFormObject() && ($entity = $form_state->getFormObject()->getEntity())) && !$entity->isNew()) {
    $plugin_id = 'group_node:' . $entity->bundle();
    // If no responsible group content types were found, we return nothing.
    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
    $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
    $group_content_types = $storage->loadByContentPluginId($plugin_id);
    if (!empty($group_content_types)) {

      // The entity is not new so lets see if it's added in any groups.
      $group_content_storage = Drupal::entityTypeManager()->getStorage('group_content');
      $group_contents = $group_content_storage->loadByProperties([
        'type' => array_keys($group_content_types),
        'entity_id' => $entity->id(),
      ]);

      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      foreach ($group_contents as $group_content) {
        if ($plugin = $group_content->getContentPlugin()) {
          $plugin_config = $plugin->getConfiguration();

          // Show the field when group content visibility for plugin is flexible
          // and the group visibility is not private.
          if (isset($plugin_config['group_content_visibility']) && $plugin_config['group_content_visibility'] === 'flexible') {
            $group = $group_content->getGroup();
            if ($group_flex_group->getGroupVisibility($group) !== GroupVisibilityInterface::GROUP_FLEX_TYPE_VIS_PRIVATE) {
              $first_value = $group_content->get('content_visibility')->first();
              $default_value = ($first_value !== NULL) ? $first_value->getString() : group_flex_content_get_default_content_visibility();
              $hide_field = FALSE;
            }
          }
        }
      }
    }
  }

  $form['content_visibility']['widget']['#default_value'] = $default_value;

  // Let's remove this computed field if needed.
  if ($hide_field) {
    $form['content_visibility']['#access'] = FALSE;
    return;
  }

  // Otherwise: add the submit handler.
  $form['actions']['submit']['#submit'][] = 'group_flex_content_content_visibility_submit';
}

/**
 * Make sure content visibility is saved for the group content.
 *
 * @see group_flex_content_form_alter()
 * @see group_content_entity_submit()
 * @see \Drupal\group\Entity\Controller\GroupContentController::createForm()
 */
function group_flex_content_content_visibility_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $content_visibility = $form_state->getValue('content_visibility', NULL);
  if (!$entity->isNew()) {
    $plugin_id = 'group_node:' . $entity->bundle();
    // If no responsible group content types were found, we return nothing.
    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
    $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
    $group_content_types = $storage->loadByContentPluginId($plugin_id);
    if (!empty($group_content_types)) {

      // The entity is not new so lets see if it's added in any groups.
      $group_content_storage = Drupal::entityTypeManager()->getStorage('group_content');
      $group_contents = $group_content_storage->loadByProperties([
        'type' => array_keys($group_content_types),
        'entity_id' => $entity->id(),
      ]);

      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      foreach ($group_contents as $group_content) {
        if ($plugin = $group_content->getContentPlugin()) {
          $pluginConfig = $plugin->getConfiguration();
          if (isset($pluginConfig['group_content_visibility']) && $pluginConfig['group_content_visibility'] === 'flexible') {
            $group_content->set('content_visibility', $content_visibility);
            $group_content->save();
          }
        }
      }
    }
  }
}

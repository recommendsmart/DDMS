<?php

/**
 * @file
 * Build Ultimenu blocks based on menu, and their regions on enabled menu items.
 */

use Drupal\Core\Extension\Extension;

/**
 * Provides a convenient shortcut for procedural hooks.
 *
 * @return class
 *   The Ultimenu class instances.
 */
function ultimenu($key = 'manager') {
  static $manager;
  static $skin;

  if (!isset($manager)) {
    $manager = \Drupal::service('ultimenu.manager');
  }

  switch ($key) {
    case 'skin':
      if (!isset($skin)) {
        $skin = \Drupal::service('ultimenu.skin');
      }
      return $skin;

    default:
      return $manager;
  }
}

/**
 * Implements hook_theme().
 */
function ultimenu_theme($existing, $type, $theme, $path) {
  return [
    'ultimenu' => [
      'render element' => 'element',
      'file' => 'ultimenu.theme.inc',
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function ultimenu_library_info_build() {
  return ultimenu('skin')->libraryInfoBuild();
}

/**
 * Implements hook_system_info_alter().
 */
function ultimenu_system_info_alter(&$info, Extension $file, $type) {
  if ($type == 'theme' && $file->getName() == ultimenu()->getThemeDefault() && isset($info['regions'])) {
    if ($regions = ultimenu()->getEnabledRegions()) {

      // Append the Ultimenu regions into the theme defined regions.
      foreach ($regions as $key => $region) {
        $info['regions'] += [$key => $region];
      }

      // Remove unwanted Ultimenu regions from theme .info if so configured.
      if (($remove_regions = ultimenu()->removeRegions()) !== FALSE) {
        foreach ($remove_regions as $key => $region) {
          unset($info['regions'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_themes_uninstalled().
 */
function ultimenu_themes_uninstalled($theme_list) {
  ultimenu('skin')->clearCachedDefinitions(TRUE);
}

/**
 * Checks if we are using the default theme.
 */
function _ultimenu_is_applicable() {
  static $applicable;
  if (!isset($applicable)) {
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $applicable = ultimenu()->getThemeDefault() == $theme;
  }
  return $applicable;
}

/**
 * Implements hook_page_bottom().
 */
function ultimenu_page_bottom(array &$page_bottom) {
  if (_ultimenu_is_applicable()) {
    $label = t('Menu');
    $button = '<button data-ultimenu-button="#ultimenu-main" class="button button--ultimenu"
      aria-label="' . $label . '" value="' . $label . '"><span class="bars">' . $label . '</span></button>';
    $page_bottom['ultimenu_button']['#markup'] = $button;
    $page_bottom['ultimenu_button']['#allowed_tags'] = ['button', 'span'];
  }
}

/**
 * Implements hook_preprocess_region().
 */
function ultimenu_preprocess_region(&$variables) {
  if (strpos($variables['region'], 'ultimenu_') !== FALSE) {
    $variables['attributes']['class'][] = 'ultimenu__region';
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ultimenu_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'ultimenu_block' && $variables['derivative_plugin_id'] == 'ultimenu-main') {
    $config = $variables['configuration'];
    $canvas_skin = empty($config['canvas_skin']) ? 'scalein' : $config['canvas_skin'];

    $variables['#attached']['library'][] = 'ultimenu/hamburger';
    $variables['#attached']['library'][] = 'ultimenu/offcanvas.' . $canvas_skin;

    // Optional if using the provided configuration.
    if (!empty($config['canvas_off']) && !empty($config['canvas_on'])) {
      $js_config = [
        'canvasOff' => trim(strip_tags($config['canvas_off'])),
        'canvasOn' => trim(strip_tags($config['canvas_on'])),
      ];
      $variables['#attached']['drupalSettings']['ultimenu'] = $js_config;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ultimenu_preprocess_html(&$variables) {
  if (_ultimenu_is_applicable()) {
    $variables['attributes']['class'][] = 'is-ultimenu-canvas';

    // If off-canvas is enabled for both mobile and desktop, add `active`
    // class, else it means menu item link is hoverable for desktop.
    $active = ultimenu()->getSetting('goodies.off-canvas-all') ? 'active' : 'hover';
    $variables['attributes']['class'][] = 'is-ultimenu-canvas--' . $active;
  }
}

/**
 * Implements hook_help().
 */
function ultimenu_help($route_name) {
  if ($route_name == 'help.page.ultimenu') {
    $output = file_get_contents(dirname(__FILE__) . '/docs/README.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/CONFIGURATION.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/STYLING.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/TROUBLESHOOTING.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/UPDATING.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/FAQ.md');
    $output .= file_get_contents(dirname(__FILE__) . '/docs/MAINTAINERS.md');
    return function_exists('blazy_parse_markdown') ? blazy_parse_markdown($output) : '<pre>' . $output . '</pre>';
  }
  return '';
}

<?php

/**
 * @file
 * Workbench Reviewer module file.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_bundle_field_info().
 */
function workbench_reviewer_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Only add the reviewer field for bundles that are under moderation.
  if ($moderation_info->shouldModerateEntitiesOfBundle($entity_type, $bundle)) {
    $definitions['workbench_reviewer'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Reviewer'))
      ->setDescription(t('A user to assign this piece of content to for review.'))
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'hidden',
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -100,
        'settings' => [
          'size' => 60,
          'match_operator' => 'CONTAINS',
          'placeholder' => '',
        ],
      ])
      ->setSetting('target_type', 'user')
      ->setSetting('handler', 'default');
    return $definitions;
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function workbench_reviewer_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    $definitions['workbench_reviewer'] = BaseFieldDefinition::create('entity_reference')
      ->setName('workbench_reviewer')
      ->setLabel(t('Reviewer'))
      ->setDescription(t('A user to assign this piece of content to for review'))
      ->setTargetEntityTypeId($entity_type->id())
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'user');
    return $definitions;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function workbench_reviewer_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Create a workflow section in the right "advanced" sidebar.
  $form['workflow'] = [
    '#type' => 'details',
    '#title' => t('Workflow'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['node-form-options'],
    ],
    '#attached' => [
      'library' => ['node/drupal.node'],
    ],
    '#weight' => 100,
    '#optional' => FALSE,
  ];

  // Move the Workbench Reviewer field to a new "Workflow" tab.
  $form['revision_log']['#group'] = 'workflow';
  $form['workbench_reviewer']['#group'] = 'workflow';
}

/**
 * Implements hook_entity_presave().
 */
function workbench_reviewer_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    $node = $entity;
  }
}

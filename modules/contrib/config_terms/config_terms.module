<?php

/**
 * @file
 * Contains config_terms.module..
 */

use Drupal\Component\Utility\Tags;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\config_terms\Entity\Term;
use Drupal\config_terms\Entity\VocabInterface;

/**
 * Implements hook_help().
 */
function config_terms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the config_terms module.
    case 'help.page.config_terms':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows the creation of Config Entity based terms.') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Checks and updates the hierarchy flag of a vocab.
 *
 * Checks the current parents of all terms in a vocab and updates the
 * vocab's hierarchy setting to the lowest possible level. If no term
 * has parent terms then the vocab will be given a hierarchy of
 * CONFIG_TERMS_HIERARCHY_DISABLED. If any term has a single parent then the
 * vocab will be given a hierarchy of CONFIG_TERMS_HIERARCHY_SINGLE. If any
 * term has multiple parents then the vocab will be given a hierarchy of
 * CONFIG_TERMS_HIERARCHY_MULTIPLE.
 *
 * @param \Drupal\config_terms\Entity\VocabInterface $vocab
 *   A config terms vocab entity.
 * @param array $changed_term
 *   An array of the term structure that was updated.
 *
 * @return int
 *   An integer that represents the level of the vocab's hierarchy.
 */
function config_terms_check_vocab_hierarchy(VocabInterface $vocab, array $changed_term) {
  $tree = \Drupal::entityTypeManager()
    ->getStorage('config_terms_term')
    ->loadTree($vocab->id());
  $hierarchy = VocabInterface::HIERARCHY_DISABLED;
  foreach ($tree as $term) {
    // Update the changed term with the new parent value before comparison.
    $term_parents = $term->getParents();
    if ($term->id() == $changed_term['id']) {
      $term->setParents($term_parents);
    }
    // Check this term's parent count.
    if (count($term_parents) > 1) {
      $hierarchy = VocabInterface::HIERARCHY_MULTIPLE;
      break;
    }
    elseif (count($term_parents) == 1 && !isset($term_parents[0])) {
      $hierarchy = VocabInterface::HIERARCHY_SINGLE;
    }
  }
  if ($hierarchy != $vocab->getHierarchy()) {
    $vocab->setHierarchy($hierarchy);
    $vocab->save();
  }

  return $hierarchy;
}

/**
 * Clear all static cache variables for terms.
 */
function config_terms_terms_static_reset() {
  \Drupal::entityTypeManager()->getStorage('config_terms_term')->resetCache();
}

/**
 * Clear all static cache variables for vocab.
 *
 * @param array $ids
 *   An array of ids to reset in the entity cache.
 */
function config_terms_vocab_static_reset(array $ids = NULL) {
  \Drupal::entityTypeManager()->getStorage('config_terms_vocab')->resetCache($ids);
}

/**
 * Get names for all config terms vocabs.
 *
 * @return array
 *   A list of existing vocab IDs.
 */
function config_terms_vocab_get_names() {
  $names = &drupal_static(__FUNCTION__);

  if (!isset($names)) {
    $names = [];
    $config_names = \Drupal::configFactory()->listAll('config_terms.vocab.');
    foreach ($config_names as $config_name) {
      $id = substr($config_name, strlen('config_terms.vocab.'));
      $names[$id] = $id;
    }
  }

  return $names;
}

/**
 * Try to map a string to an existing term, as for glossary use.
 *
 * Provides a case-insensitive and trimmed mapping, to maximize the
 * likelihood of a successful match.
 *
 * @param string $name
 *   Name of the term to search for.
 * @param string $vocab
 *   (optional) Vocab machine name to limit the search. Defaults to NULL.
 *
 * @return array
 *   An array of matching term objects.
 */
function config_terms_term_load_multiple_by_name($name, $vocab = NULL) {
  $values = ['name' => trim($name)];
  if (isset($vocab)) {
    $vocabs = config_terms_vocab_get_names();
    if (isset($vocabs[$vocab])) {
      $values['vid'] = $vocab;
    }
    else {
      // Return an empty array when filtering by a non-existing vocab.
      return [];
    }
  }
  return \Drupal::entityTypeManager()
    ->getStorage('config_terms_term')
    ->loadByProperties($values);
}

/**
 * Implodes a list of tags of a certain vocab into a string.
 *
 * @see \Drupal\Component\Utility\Tags::explode()
 */
function config_terms_implode_tags($tags, $vid = NULL) {
  $typed_tags = [];
  foreach ($tags as $tag) {
    // Extract terms belonging to the vocab in question.
    if (!isset($vid) || $tag->bundle() == $vid) {
      // Make sure we have a completed loaded config_terms term.
      if ($tag instanceof EntityInterface && $label = $tag->label()) {
        // Commas and quotes in tag names are special cases, so encode 'em.
        $typed_tags[] = Tags::encode($label);
      }
    }
  }
  return implode(', ', $typed_tags);
}

/**
 * Title callback for term pages.
 *
 * @param \Drupal\config_terms\Entity\Term $term
 *   A config_terms term entity.
 *
 * @return string
 *   The term name to be used as the page title.
 */
function config_terms_term_title(Term $term) {
  return $term->getName();
}

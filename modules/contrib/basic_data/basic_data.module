<?php

/**
 * @file
 * Contains basic_data.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function basic_data_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the basic_data module.
    case 'help.page.basic_data':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function basic_data_theme() {
  $theme = [];
  $theme['basic_data'] = [
    'render element' => 'elements',
    'file' => 'basic_data.page.inc',
    'template' => 'basic_data',
  ];
  $theme['basic_data_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'basic_data.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function basic_data_theme_suggestions_basic_data(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#basic_data'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'basic_data__' . $sanitized_view_mode;
  $suggestions[] = 'basic_data__' . $entity->bundle();
  $suggestions[] = 'basic_data__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'basic_data__' . $entity->id();
  $suggestions[] = 'basic_data__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Change length of a varchar entity field with data, safe with entity-updates.
 *
 * This updates the storage schema, the database schema, and the last
 * installed schema.
 *
 * The entity schema must also be changed in code in the entities
 * baseFieldDefinitions() or in an alter.
 *
 * @param string $entity_type_id
 *   The entity type.
 * @param string $field_name
 *   The field name to change.
 * @param int $field_length
 *   The new length of the field, must be larger than the previous value.
 */
function _basic_data_db_change_varchar_field($entity_type_id, $field_name, $field_length) {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
  $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($entity_type_id);
  $schema_repository->setLastInstalledFieldStorageDefinition($base_field_definitions[$field_name]);
  $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
  // Update the serialized schema property.
  $rc = new \ReflectionClass($field_storage_definitions[$field_name]);
  $schema_property = $rc->getProperty('schema');
  $schema_property->setAccessible(TRUE);
  $schema = $schema_property->getValue($field_storage_definitions[$field_name]);
  $schema['columns']['value']['length'] = $field_length;
  // Had to comment out the line below, not sure why.
  // $field_storage_definitions[$field_name]->setValue($field_storage_definitions, $schema);
  // Update the field definition in the last installed schema repository.
  $schema_repository->setLastInstalledFieldStorageDefinitions($entity_type_id, $field_storage_definitions);
  // Update the storage schema.
  $key_value = \Drupal::keyValue('entity.storage_schema.sql');
  $key_name = $entity_type_id . '.field_schema_data.' . $field_name;
  $storage_schema = $key_value->get($key_name);
  // Update all tables where the field is present.
  foreach ($storage_schema as &$table_schema) {
    $table_schema['fields'][$field_name]['length'] = $field_length;
  }
  $key_value->set($key_name, $storage_schema);
  // Update the database tables where the field is part of.
  $db = Drupal::database();
  foreach ($storage_schema as $table_name => $table_schema) {
    $db->schema()->changeField($table_name, $field_name, $field_name, $table_schema['fields'][$field_name]);
  }
}


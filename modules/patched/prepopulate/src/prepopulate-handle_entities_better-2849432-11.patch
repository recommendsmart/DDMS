From b6a2e2592e009f23b4844392a34fc4f3d356ce02 Mon Sep 17 00:00:00 2001
From: Colan Schwartz <colan@58704.no-reply.drupal.org>
Date: Mon, 6 Nov 2017 16:11:55 -0500
Subject: [PATCH] Issue #2849432 by brynj, colan: Prepopulate entities using
 the Entity API instead of the Form API.

---
 prepopulate.info.yml                     |  3 +-
 prepopulate.module                       | 35 +++----------
 src/Controller/prepopulateController.php | 89 --------------------------------
 src/Prepopulators/EntityPrepopulator.php | 69 +++++++++++++++++++++++++
 src/Prepopulators/Prepopulator.php       | 61 ++++++++++++++++++++++
 5 files changed, 139 insertions(+), 118 deletions(-)
 delete mode 100644 src/Controller/prepopulateController.php
 create mode 100644 src/Prepopulators/EntityPrepopulator.php
 create mode 100644 src/Prepopulators/Prepopulator.php

diff --git a/prepopulate.info.yml b/prepopulate.info.yml
index fa45b1d..c13b788 100644
--- a/prepopulate.info.yml
+++ b/prepopulate.info.yml
@@ -1,4 +1,5 @@
 type: module
 name: Prepopulate
-description: Allows form elements to be prepopulated from the URL.
+description: Allows form elements to be prepopulated from the request.
 core: 8.x
+package: Content
diff --git a/prepopulate.module b/prepopulate.module
index 560cdae..624982b 100644
--- a/prepopulate.module
+++ b/prepopulate.module
@@ -3,38 +3,17 @@
 /**
  * @file
  * Fill form elements with data from GET or POST values.
- *
- * Originally written by ea. Farris <eafarris@gmail.com>
- * Based on an idea from chx, from the conversation at
- * http://www.drupal.org/node/27155.
  */
 
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\prepopulate\Prepopulators\EntityPrepopulator;
 
 /**
- * Implements hook_form_alter().
- */
-function prepopulate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  // If this is a subsequent step of a multi-step form, the prepopulate values
-  // have done their work, and the user may have modified them: bail.
-  if (!empty($form_state->rebuild_info)) {
-    return;
-  }
-  if (isset($_REQUEST['edit'])) {
-    $form['#after_build'][] = 'prepopulate_after_build';
-  }
-}
-
-/**
- * An #after_build function to set the values prepopulated in the request.
+ * Implements hook_entity_prepare_form().
+ *
+ * Prepopulates all entity forms.
  */
-function prepopulate_after_build($form) {
-  if (isset($_REQUEST['edit'])) {
-    $request = (array) $_REQUEST['edit'];
-    $prepopulateController = new \Drupal\prepopulate\Controller\prepopulateController();
-    $prepopulateController->_prepopulate_request_walk($form, $request);
-  }
-  return $form;
+function prepopulate_entity_prepare_form(EntityInterface $entity, string $operation, FormStateInterface $form_state) {
+  EntityPrepopulator::create(\Drupal::getContainer(), $entity)->prepopulate();
 }
-
-
diff --git a/src/Controller/prepopulateController.php b/src/Controller/prepopulateController.php
deleted file mode 100644
index 8957772..0000000
--- a/src/Controller/prepopulateController.php
+++ /dev/null
@@ -1,89 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains \Drupal\prepopulate\Controller.
- */
-
-namespace Drupal\prepopulate\Controller;
-
-use Drupal\Core\Controller\ControllerBase;
-use Drupal\Core\Render\Element;
-use Drupal;
-
-
-class prepopulateController extends ControllerBase {
-  public function __construct() {
-    $this->database = Drupal::database();
-  }
-  /**
-    * Internal helper to set element values from the $_REQUEST variable.
-    *
-    * @param array &$form
-    *   A form element.
-    * @param mixed &$request_slice
-    *   String or array. Value(s) to be applied to the element.
-   */
-  function _prepopulate_request_walk(&$form, &$request_slice) {
-    $limited_types = array(
-      'actions',
-      'button',
-      'container',
-      'hidden',
-      'image_button',
-      'markup',
-      'password',
-      'password_confirm',
-      'text_format',
-      'token',
-      'value',
-    );
-    if (is_array($request_slice)) {
-      foreach (array_keys($request_slice) as $request_variable) {
-        if (isset($form[$request_variable])) {
-          if (isset($form[$request_variable]['widget'][0]['value']['#type'])) {
-            $type = $form[$request_variable]['widget'][0]['value']['#type'];
-          }
-          elseif (isset($form[$request_variable]['widget'][0]['target_id']['#type'])) {
-            $type = $form[$request_variable]['widget'][0]['target_id']['#type'];
-          }
-          elseif (isset($form[$request_variable]['widget']['#type'])) {
-            $type = $form[$request_variable]['widget']['#type'];
-          }
-          
-          if (Element::child($request_variable) && !empty($form[$request_variable]) && (!isset($type) || !in_array($type, $limited_types))) {
-            if (!isset($form[$request_variable]['#access']) || $form[$request_variable]['#access'] != FALSE) {
-              $this->_prepopulate_request_walk($form[$request_variable], $request_slice[$request_variable]);
-            }
-          }
-        }
-      }
-    }
-    else {
-      $widget = $form['widget'];
-      if (empty($widget) || (isset($widget[0]['value']['#type']) && $widget[0]['value']['#type'] == 'markup')) {
-        $form['widget'][0]['value']['#value'] = check_plain($request_slice);
-      }
-      else {
-        if (isset($form['widget'][0]['value'])) {
-          $form['widget'][0]['value']['#value'] = $request_slice;
-        }
-        else {
-          if (isset($form['widget'][0]['target_id'])) {
-            // Referenced element: look for name ? Title (id)
-            if (is_numeric($request_slice) && ($target_node = \Drupal\node\Entity\Node::load($request_slice)) && $target_node->access('view')) {
-              $form['widget'][0]['target_id']['#value'] = $target_node->getTitle() . ' (' . $request_slice . ')';
-            }
-            else {
-              $form['widget'][0]['target_id']['#value'] = $request_slice;
-            }
-          }
-        }
-      }
-      $type = (isset($widget['#type'])) ? $widget['#type'] : NULL;
-      if ($type == 'select') {
-        $form['widget']['#value'] = $request_slice;
-      }
-    }
-  }
-}
diff --git a/src/Prepopulators/EntityPrepopulator.php b/src/Prepopulators/EntityPrepopulator.php
new file mode 100644
index 0000000..c1adfc3
--- /dev/null
+++ b/src/Prepopulators/EntityPrepopulator.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\prepopulate\Prepopulators;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Prepopulates entities before their forms are displayed.
+ */
+class EntityPrepopulator extends Prepopulator {
+
+  /**
+   * The entity whose fields are being prepopulated.
+   *
+   * @var Drupal\Core\Entity\EntityInterface
+   */
+  protected $entity;
+
+  /**
+   * Instantiates a new instance of this class.
+   *
+   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   *   The service container this instance should use.
+   * @param Drupal\Core\Entity\EntityInterface $entity
+   *   The entity.
+   *
+   * @see ContainerInjectionInterface
+   */
+  public static function create(ContainerInterface $container, EntityInterface $entity) {
+    return new static(
+      $container->get('request_stack'),
+      $entity
+    );
+  }
+
+  /**
+   * Class constructor.
+   *
+   * @param Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   The request stack.
+   * @param Drupal\Core\Entity\EntityInterface $entity
+   *   The entity.
+   */
+  public function __construct(RequestStack $request_stack, EntityInterface $entity) {
+    parent::__construct($request_stack);
+    $this->entity = $entity;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function hasFormField(string $form_field) {
+    if (($this->entity instanceof FieldableEntityInterface) && $this->entity->hasField($form_field)) {
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setFormField(string $form_field, string $value) {
+    $this->entity->set($form_field, $value);
+  }
+
+}
diff --git a/src/Prepopulators/Prepopulator.php b/src/Prepopulators/Prepopulator.php
new file mode 100644
index 0000000..b24cd2d
--- /dev/null
+++ b/src/Prepopulators/Prepopulator.php
@@ -0,0 +1,61 @@
+<?php
+
+namespace Drupal\prepopulate\Prepopulators;
+
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Base class for prepopulators.
+ */
+abstract class Prepopulator {
+
+  /**
+   * The list of HTTP(S) request parameters.
+   *
+   * @var array
+   */
+  protected $requestParameters;
+
+  /**
+   * Class constructor.
+   *
+   * @param Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   The request stack.
+   */
+  public function __construct(RequestStack $request_stack) {
+    $this->requestParameters = $request_stack->getCurrentRequest()->query->all();
+  }
+
+  /**
+   * Prepopulate the entity with the request parameters.
+   */
+  public function prepopulate() {
+    foreach ($this->requestParameters as $parameter => $value) {
+      if ($this->hasFormField($parameter)) {
+        $this->setFormField($parameter, $value);
+      }
+    }
+  }
+
+  /**
+   * Determines if this prepopulator has a particular form field.
+   *
+   * @param string $form_field
+   *   The form field.
+   *
+   * @return bool
+   *   TRUE if the form field exists; FALSE otherwise.
+   */
+  abstract protected function hasFormField(string $form_field);
+
+  /**
+   * Fills a particular form field with a value.
+   *
+   * @param string $form_field
+   *   The form field.
+   * @param string $value
+   *   The value.
+   */
+  abstract protected function setFormField(string $form_field, string $value);
+
+}
-- 
2.14.1

